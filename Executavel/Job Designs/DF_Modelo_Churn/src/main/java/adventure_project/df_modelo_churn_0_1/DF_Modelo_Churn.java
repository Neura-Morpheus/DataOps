// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package adventure_project.df_modelo_churn_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: DF_Modelo_Churn Purpose: Dataset modelo Churn<br>
 * Description: Dados agregados para relatório de negócios <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class DF_Modelo_Churn implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}

	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "DF_Modelo_Churn";
	private final String projectName = "ADVENTURE_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				DF_Modelo_Churn.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(DF_Modelo_Churn.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSampleRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_1_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_1_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_1_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_ADVENTURE_PROJECT_DF_Modelo_Churn = new byte[0];
    static byte[] commonByteArray_ADVENTURE_PROJECT_DF_Modelo_Churn = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer Ano;

				public Integer getAno () {
					return this.Ano;
				}
				
			    public Integer Mes;

				public Integer getMes () {
					return this.Mes;
				}
				
			    public String SalesPerson;

				public String getSalesPerson () {
					return this.SalesPerson;
				}
				
			    public String ProductNumber;

				public String getProductNumber () {
					return this.ProductNumber;
				}
				
			    public String ProductName;

				public String getProductName () {
					return this.ProductName;
				}
				
			    public Integer CustomerID;

				public Integer getCustomerID () {
					return this.CustomerID;
				}
				
			    public String CompanyName;

				public String getCompanyName () {
					return this.CompanyName;
				}
				
			    public Float OrderQty;

				public Float getOrderQty () {
					return this.OrderQty;
				}
				
			    public Float ValorVenda;

				public Float getValorVenda () {
					return this.ValorVenda;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CustomerID == null) ? 0 : this.CustomerID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row8Struct other = (row8Struct) obj;
		
						if (this.CustomerID == null) {
							if (other.CustomerID != null)
								return false;
						
						} else if (!this.CustomerID.equals(other.CustomerID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row8Struct other) {

		other.Ano = this.Ano;
	            other.Mes = this.Mes;
	            other.SalesPerson = this.SalesPerson;
	            other.ProductNumber = this.ProductNumber;
	            other.ProductName = this.ProductName;
	            other.CustomerID = this.CustomerID;
	            other.CompanyName = this.CompanyName;
	            other.OrderQty = this.OrderQty;
	            other.ValorVenda = this.ValorVenda;
	            
	}

	public void copyKeysDataTo(row8Struct other) {

		other.CustomerID = this.CustomerID;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ADVENTURE_PROJECT_DF_Modelo_Churn.length) {
				if(length < 1024 && commonByteArray_ADVENTURE_PROJECT_DF_Modelo_Churn.length == 0) {
   					commonByteArray_ADVENTURE_PROJECT_DF_Modelo_Churn = new byte[1024];
				} else {
   					commonByteArray_ADVENTURE_PROJECT_DF_Modelo_Churn = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ADVENTURE_PROJECT_DF_Modelo_Churn, 0, length);
			strReturn = new String(commonByteArray_ADVENTURE_PROJECT_DF_Modelo_Churn, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ADVENTURE_PROJECT_DF_Modelo_Churn) {

        	try {

        		int length = 0;
		
						this.Ano = readInteger(dis);
					
						this.Mes = readInteger(dis);
					
					this.SalesPerson = readString(dis);
					
					this.ProductNumber = readString(dis);
					
					this.ProductName = readString(dis);
					
						this.CustomerID = readInteger(dis);
					
					this.CompanyName = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.OrderQty = null;
           				} else {
           			    	this.OrderQty = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ValorVenda = null;
           				} else {
           			    	this.ValorVenda = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Ano,dos);
					
					// Integer
				
						writeInteger(this.Mes,dos);
					
					// String
				
						writeString(this.SalesPerson,dos);
					
					// String
				
						writeString(this.ProductNumber,dos);
					
					// String
				
						writeString(this.ProductName,dos);
					
					// Integer
				
						writeInteger(this.CustomerID,dos);
					
					// String
				
						writeString(this.CompanyName,dos);
					
					// Float
				
						if(this.OrderQty == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.OrderQty);
		            	}
					
					// Float
				
						if(this.ValorVenda == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.ValorVenda);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Ano="+String.valueOf(Ano));
		sb.append(",Mes="+String.valueOf(Mes));
		sb.append(",SalesPerson="+SalesPerson);
		sb.append(",ProductNumber="+ProductNumber);
		sb.append(",ProductName="+ProductName);
		sb.append(",CustomerID="+String.valueOf(CustomerID));
		sb.append(",CompanyName="+CompanyName);
		sb.append(",OrderQty="+String.valueOf(OrderQty));
		sb.append(",ValorVenda="+String.valueOf(ValorVenda));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CustomerID, other.CustomerID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_ADVENTURE_PROJECT_DF_Modelo_Churn = new byte[0];
    static byte[] commonByteArray_ADVENTURE_PROJECT_DF_Modelo_Churn = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer Ano;

				public Integer getAno () {
					return this.Ano;
				}
				
			    public Integer Mes;

				public Integer getMes () {
					return this.Mes;
				}
				
			    public String SalesPerson;

				public String getSalesPerson () {
					return this.SalesPerson;
				}
				
			    public String ProductNumber;

				public String getProductNumber () {
					return this.ProductNumber;
				}
				
			    public String ProductName;

				public String getProductName () {
					return this.ProductName;
				}
				
			    public Integer CustomerID;

				public Integer getCustomerID () {
					return this.CustomerID;
				}
				
			    public String CompanyName;

				public String getCompanyName () {
					return this.CompanyName;
				}
				
			    public Float OrderQty;

				public Float getOrderQty () {
					return this.OrderQty;
				}
				
			    public Float ValorVenda;

				public Float getValorVenda () {
					return this.ValorVenda;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CustomerID == null) ? 0 : this.CustomerID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row7Struct other = (row7Struct) obj;
		
						if (this.CustomerID == null) {
							if (other.CustomerID != null)
								return false;
						
						} else if (!this.CustomerID.equals(other.CustomerID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row7Struct other) {

		other.Ano = this.Ano;
	            other.Mes = this.Mes;
	            other.SalesPerson = this.SalesPerson;
	            other.ProductNumber = this.ProductNumber;
	            other.ProductName = this.ProductName;
	            other.CustomerID = this.CustomerID;
	            other.CompanyName = this.CompanyName;
	            other.OrderQty = this.OrderQty;
	            other.ValorVenda = this.ValorVenda;
	            
	}

	public void copyKeysDataTo(row7Struct other) {

		other.CustomerID = this.CustomerID;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ADVENTURE_PROJECT_DF_Modelo_Churn.length) {
				if(length < 1024 && commonByteArray_ADVENTURE_PROJECT_DF_Modelo_Churn.length == 0) {
   					commonByteArray_ADVENTURE_PROJECT_DF_Modelo_Churn = new byte[1024];
				} else {
   					commonByteArray_ADVENTURE_PROJECT_DF_Modelo_Churn = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ADVENTURE_PROJECT_DF_Modelo_Churn, 0, length);
			strReturn = new String(commonByteArray_ADVENTURE_PROJECT_DF_Modelo_Churn, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ADVENTURE_PROJECT_DF_Modelo_Churn) {

        	try {

        		int length = 0;
		
						this.Ano = readInteger(dis);
					
						this.Mes = readInteger(dis);
					
					this.SalesPerson = readString(dis);
					
					this.ProductNumber = readString(dis);
					
					this.ProductName = readString(dis);
					
						this.CustomerID = readInteger(dis);
					
					this.CompanyName = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.OrderQty = null;
           				} else {
           			    	this.OrderQty = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ValorVenda = null;
           				} else {
           			    	this.ValorVenda = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Ano,dos);
					
					// Integer
				
						writeInteger(this.Mes,dos);
					
					// String
				
						writeString(this.SalesPerson,dos);
					
					// String
				
						writeString(this.ProductNumber,dos);
					
					// String
				
						writeString(this.ProductName,dos);
					
					// Integer
				
						writeInteger(this.CustomerID,dos);
					
					// String
				
						writeString(this.CompanyName,dos);
					
					// Float
				
						if(this.OrderQty == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.OrderQty);
		            	}
					
					// Float
				
						if(this.ValorVenda == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.ValorVenda);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Ano="+String.valueOf(Ano));
		sb.append(",Mes="+String.valueOf(Mes));
		sb.append(",SalesPerson="+SalesPerson);
		sb.append(",ProductNumber="+ProductNumber);
		sb.append(",ProductName="+ProductName);
		sb.append(",CustomerID="+String.valueOf(CustomerID));
		sb.append(",CompanyName="+CompanyName);
		sb.append(",OrderQty="+String.valueOf(OrderQty));
		sb.append(",ValorVenda="+String.valueOf(ValorVenda));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CustomerID, other.CustomerID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_1 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_1> {
    final static byte[] commonByteArrayLock_ADVENTURE_PROJECT_DF_Modelo_Churn = new byte[0];
    static byte[] commonByteArray_ADVENTURE_PROJECT_DF_Modelo_Churn = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer Ano;

				public Integer getAno () {
					return this.Ano;
				}
				
			    public Integer Mes;

				public Integer getMes () {
					return this.Mes;
				}
				
			    public String SalesPerson;

				public String getSalesPerson () {
					return this.SalesPerson;
				}
				
			    public String ProductNumber;

				public String getProductNumber () {
					return this.ProductNumber;
				}
				
			    public String ProductName;

				public String getProductName () {
					return this.ProductName;
				}
				
			    public Integer CustomerID;

				public Integer getCustomerID () {
					return this.CustomerID;
				}
				
			    public String CompanyName;

				public String getCompanyName () {
					return this.CompanyName;
				}
				
			    public Float OrderQty;

				public Float getOrderQty () {
					return this.OrderQty;
				}
				
			    public Float ValorVenda;

				public Float getValorVenda () {
					return this.ValorVenda;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CustomerID == null) ? 0 : this.CustomerID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final OnRowsEndStructtAggregateRow_1 other = (OnRowsEndStructtAggregateRow_1) obj;
		
						if (this.CustomerID == null) {
							if (other.CustomerID != null)
								return false;
						
						} else if (!this.CustomerID.equals(other.CustomerID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(OnRowsEndStructtAggregateRow_1 other) {

		other.Ano = this.Ano;
	            other.Mes = this.Mes;
	            other.SalesPerson = this.SalesPerson;
	            other.ProductNumber = this.ProductNumber;
	            other.ProductName = this.ProductName;
	            other.CustomerID = this.CustomerID;
	            other.CompanyName = this.CompanyName;
	            other.OrderQty = this.OrderQty;
	            other.ValorVenda = this.ValorVenda;
	            
	}

	public void copyKeysDataTo(OnRowsEndStructtAggregateRow_1 other) {

		other.CustomerID = this.CustomerID;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ADVENTURE_PROJECT_DF_Modelo_Churn.length) {
				if(length < 1024 && commonByteArray_ADVENTURE_PROJECT_DF_Modelo_Churn.length == 0) {
   					commonByteArray_ADVENTURE_PROJECT_DF_Modelo_Churn = new byte[1024];
				} else {
   					commonByteArray_ADVENTURE_PROJECT_DF_Modelo_Churn = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ADVENTURE_PROJECT_DF_Modelo_Churn, 0, length);
			strReturn = new String(commonByteArray_ADVENTURE_PROJECT_DF_Modelo_Churn, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ADVENTURE_PROJECT_DF_Modelo_Churn) {

        	try {

        		int length = 0;
		
						this.Ano = readInteger(dis);
					
						this.Mes = readInteger(dis);
					
					this.SalesPerson = readString(dis);
					
					this.ProductNumber = readString(dis);
					
					this.ProductName = readString(dis);
					
						this.CustomerID = readInteger(dis);
					
					this.CompanyName = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.OrderQty = null;
           				} else {
           			    	this.OrderQty = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ValorVenda = null;
           				} else {
           			    	this.ValorVenda = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Ano,dos);
					
					// Integer
				
						writeInteger(this.Mes,dos);
					
					// String
				
						writeString(this.SalesPerson,dos);
					
					// String
				
						writeString(this.ProductNumber,dos);
					
					// String
				
						writeString(this.ProductName,dos);
					
					// Integer
				
						writeInteger(this.CustomerID,dos);
					
					// String
				
						writeString(this.CompanyName,dos);
					
					// Float
				
						if(this.OrderQty == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.OrderQty);
		            	}
					
					// Float
				
						if(this.ValorVenda == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.ValorVenda);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Ano="+String.valueOf(Ano));
		sb.append(",Mes="+String.valueOf(Mes));
		sb.append(",SalesPerson="+SalesPerson);
		sb.append(",ProductNumber="+ProductNumber);
		sb.append(",ProductName="+ProductName);
		sb.append(",CustomerID="+String.valueOf(CustomerID));
		sb.append(",CompanyName="+CompanyName);
		sb.append(",OrderQty="+String.valueOf(OrderQty));
		sb.append(",ValorVenda="+String.valueOf(ValorVenda));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_1 other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CustomerID, other.CustomerID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class saida_Rel_VendasStruct implements routines.system.IPersistableRow<saida_Rel_VendasStruct> {
    final static byte[] commonByteArrayLock_ADVENTURE_PROJECT_DF_Modelo_Churn = new byte[0];
    static byte[] commonByteArray_ADVENTURE_PROJECT_DF_Modelo_Churn = new byte[0];

	
			    public Integer Ano;

				public Integer getAno () {
					return this.Ano;
				}
				
			    public Integer Mes;

				public Integer getMes () {
					return this.Mes;
				}
				
			    public String SalesPerson;

				public String getSalesPerson () {
					return this.SalesPerson;
				}
				
			    public String ProductNumber;

				public String getProductNumber () {
					return this.ProductNumber;
				}
				
			    public String ProductName;

				public String getProductName () {
					return this.ProductName;
				}
				
			    public Integer CustomerID;

				public Integer getCustomerID () {
					return this.CustomerID;
				}
				
			    public String CompanyName;

				public String getCompanyName () {
					return this.CompanyName;
				}
				
			    public Integer OrderQty;

				public Integer getOrderQty () {
					return this.OrderQty;
				}
				
			    public Float ValorVenda;

				public Float getValorVenda () {
					return this.ValorVenda;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ADVENTURE_PROJECT_DF_Modelo_Churn.length) {
				if(length < 1024 && commonByteArray_ADVENTURE_PROJECT_DF_Modelo_Churn.length == 0) {
   					commonByteArray_ADVENTURE_PROJECT_DF_Modelo_Churn = new byte[1024];
				} else {
   					commonByteArray_ADVENTURE_PROJECT_DF_Modelo_Churn = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ADVENTURE_PROJECT_DF_Modelo_Churn, 0, length);
			strReturn = new String(commonByteArray_ADVENTURE_PROJECT_DF_Modelo_Churn, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ADVENTURE_PROJECT_DF_Modelo_Churn) {

        	try {

        		int length = 0;
		
						this.Ano = readInteger(dis);
					
						this.Mes = readInteger(dis);
					
					this.SalesPerson = readString(dis);
					
					this.ProductNumber = readString(dis);
					
					this.ProductName = readString(dis);
					
						this.CustomerID = readInteger(dis);
					
					this.CompanyName = readString(dis);
					
						this.OrderQty = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ValorVenda = null;
           				} else {
           			    	this.ValorVenda = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Ano,dos);
					
					// Integer
				
						writeInteger(this.Mes,dos);
					
					// String
				
						writeString(this.SalesPerson,dos);
					
					// String
				
						writeString(this.ProductNumber,dos);
					
					// String
				
						writeString(this.ProductName,dos);
					
					// Integer
				
						writeInteger(this.CustomerID,dos);
					
					// String
				
						writeString(this.CompanyName,dos);
					
					// Integer
				
						writeInteger(this.OrderQty,dos);
					
					// Float
				
						if(this.ValorVenda == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.ValorVenda);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Ano="+String.valueOf(Ano));
		sb.append(",Mes="+String.valueOf(Mes));
		sb.append(",SalesPerson="+SalesPerson);
		sb.append(",ProductNumber="+ProductNumber);
		sb.append(",ProductName="+ProductName);
		sb.append(",CustomerID="+String.valueOf(CustomerID));
		sb.append(",CompanyName="+CompanyName);
		sb.append(",OrderQty="+String.valueOf(OrderQty));
		sb.append(",ValorVenda="+String.valueOf(ValorVenda));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(saida_Rel_VendasStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_ADVENTURE_PROJECT_DF_Modelo_Churn = new byte[0];
    static byte[] commonByteArray_ADVENTURE_PROJECT_DF_Modelo_Churn = new byte[0];

	
			    public Integer SalesOrderID;

				public Integer getSalesOrderID () {
					return this.SalesOrderID;
				}
				
			    public Integer SalesOrderDetailID;

				public Integer getSalesOrderDetailID () {
					return this.SalesOrderDetailID;
				}
				
			    public java.util.Date OrderDate;

				public java.util.Date getOrderDate () {
					return this.OrderDate;
				}
				
			    public Short Status;

				public Short getStatus () {
					return this.Status;
				}
				
			    public Integer OnlineOrderFlag;

				public Integer getOnlineOrderFlag () {
					return this.OnlineOrderFlag;
				}
				
			    public Integer CustomerID;

				public Integer getCustomerID () {
					return this.CustomerID;
				}
				
			    public Integer ProductID;

				public Integer getProductID () {
					return this.ProductID;
				}
				
			    public Integer SalesSK;

				public Integer getSalesSK () {
					return this.SalesSK;
				}
				
			    public Integer OrderQty;

				public Integer getOrderQty () {
					return this.OrderQty;
				}
				
			    public Float LineTotal;

				public Float getLineTotal () {
					return this.LineTotal;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ADVENTURE_PROJECT_DF_Modelo_Churn) {

        	try {

        		int length = 0;
		
						this.SalesOrderID = readInteger(dis);
					
						this.SalesOrderDetailID = readInteger(dis);
					
					this.OrderDate = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Status = null;
           				} else {
           			    	this.Status = dis.readShort();
           				}
					
						this.OnlineOrderFlag = readInteger(dis);
					
						this.CustomerID = readInteger(dis);
					
						this.ProductID = readInteger(dis);
					
						this.SalesSK = readInteger(dis);
					
						this.OrderQty = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LineTotal = null;
           				} else {
           			    	this.LineTotal = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.SalesOrderID,dos);
					
					// Integer
				
						writeInteger(this.SalesOrderDetailID,dos);
					
					// java.util.Date
				
						writeDate(this.OrderDate,dos);
					
					// Short
				
						if(this.Status == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeShort(this.Status);
		            	}
					
					// Integer
				
						writeInteger(this.OnlineOrderFlag,dos);
					
					// Integer
				
						writeInteger(this.CustomerID,dos);
					
					// Integer
				
						writeInteger(this.ProductID,dos);
					
					// Integer
				
						writeInteger(this.SalesSK,dos);
					
					// Integer
				
						writeInteger(this.OrderQty,dos);
					
					// Float
				
						if(this.LineTotal == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.LineTotal);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SalesOrderID="+String.valueOf(SalesOrderID));
		sb.append(",SalesOrderDetailID="+String.valueOf(SalesOrderDetailID));
		sb.append(",OrderDate="+String.valueOf(OrderDate));
		sb.append(",Status="+String.valueOf(Status));
		sb.append(",OnlineOrderFlag="+String.valueOf(OnlineOrderFlag));
		sb.append(",CustomerID="+String.valueOf(CustomerID));
		sb.append(",ProductID="+String.valueOf(ProductID));
		sb.append(",SalesSK="+String.valueOf(SalesSK));
		sb.append(",OrderQty="+String.valueOf(OrderQty));
		sb.append(",LineTotal="+String.valueOf(LineTotal));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tFileInputDelimited_1Struct implements routines.system.IPersistableRow<after_tFileInputDelimited_1Struct> {
    final static byte[] commonByteArrayLock_ADVENTURE_PROJECT_DF_Modelo_Churn = new byte[0];
    static byte[] commonByteArray_ADVENTURE_PROJECT_DF_Modelo_Churn = new byte[0];

	
			    public Integer SalesOrderID;

				public Integer getSalesOrderID () {
					return this.SalesOrderID;
				}
				
			    public Integer SalesOrderDetailID;

				public Integer getSalesOrderDetailID () {
					return this.SalesOrderDetailID;
				}
				
			    public java.util.Date OrderDate;

				public java.util.Date getOrderDate () {
					return this.OrderDate;
				}
				
			    public Short Status;

				public Short getStatus () {
					return this.Status;
				}
				
			    public Integer OnlineOrderFlag;

				public Integer getOnlineOrderFlag () {
					return this.OnlineOrderFlag;
				}
				
			    public Integer CustomerID;

				public Integer getCustomerID () {
					return this.CustomerID;
				}
				
			    public Integer ProductID;

				public Integer getProductID () {
					return this.ProductID;
				}
				
			    public Integer SalesSK;

				public Integer getSalesSK () {
					return this.SalesSK;
				}
				
			    public Integer OrderQty;

				public Integer getOrderQty () {
					return this.OrderQty;
				}
				
			    public Float LineTotal;

				public Float getLineTotal () {
					return this.LineTotal;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ADVENTURE_PROJECT_DF_Modelo_Churn) {

        	try {

        		int length = 0;
		
						this.SalesOrderID = readInteger(dis);
					
						this.SalesOrderDetailID = readInteger(dis);
					
					this.OrderDate = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Status = null;
           				} else {
           			    	this.Status = dis.readShort();
           				}
					
						this.OnlineOrderFlag = readInteger(dis);
					
						this.CustomerID = readInteger(dis);
					
						this.ProductID = readInteger(dis);
					
						this.SalesSK = readInteger(dis);
					
						this.OrderQty = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LineTotal = null;
           				} else {
           			    	this.LineTotal = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.SalesOrderID,dos);
					
					// Integer
				
						writeInteger(this.SalesOrderDetailID,dos);
					
					// java.util.Date
				
						writeDate(this.OrderDate,dos);
					
					// Short
				
						if(this.Status == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeShort(this.Status);
		            	}
					
					// Integer
				
						writeInteger(this.OnlineOrderFlag,dos);
					
					// Integer
				
						writeInteger(this.CustomerID,dos);
					
					// Integer
				
						writeInteger(this.ProductID,dos);
					
					// Integer
				
						writeInteger(this.SalesSK,dos);
					
					// Integer
				
						writeInteger(this.OrderQty,dos);
					
					// Float
				
						if(this.LineTotal == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.LineTotal);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SalesOrderID="+String.valueOf(SalesOrderID));
		sb.append(",SalesOrderDetailID="+String.valueOf(SalesOrderDetailID));
		sb.append(",OrderDate="+String.valueOf(OrderDate));
		sb.append(",Status="+String.valueOf(Status));
		sb.append(",OnlineOrderFlag="+String.valueOf(OnlineOrderFlag));
		sb.append(",CustomerID="+String.valueOf(CustomerID));
		sb.append(",ProductID="+String.valueOf(ProductID));
		sb.append(",SalesSK="+String.valueOf(SalesSK));
		sb.append(",OrderQty="+String.valueOf(OrderQty));
		sb.append(",LineTotal="+String.valueOf(LineTotal));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tFileInputDelimited_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tFileInputDelimited_2Process(globalMap);
		tFileInputDelimited_6Process(globalMap);
		tFileInputDelimited_4Process(globalMap);
		tFileInputDelimited_5Process(globalMap);
		tFileInputDelimited_3Process(globalMap);

		row1Struct row1 = new row1Struct();
saida_Rel_VendasStruct saida_Rel_Vendas = new saida_Rel_VendasStruct();
row7Struct row7 = new row7Struct();
row8Struct row8 = new row8Struct();





	
	/**
	 * [tAggregateRow_1_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_1_AGGOUT", false);
		start_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"saida_Rel_Vendas");
					}
				
		int tos_count_tAggregateRow_1_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_1 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_1 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_1 utilClass_tAggregateRow_1 = new UtilClass_tAggregateRow_1();

	

	class AggOperationStruct_tAggregateRow_1 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				Integer Ano;
    				Integer Mes;
    				String SalesPerson;
    				String ProductNumber;
    				String ProductName;
    				Integer CustomerID;
    				String CompanyName;
         			Float OrderQty_sum;BigDecimal ValorVenda_sum;
           			
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
							result = prime * result + ((this.Ano == null) ? 0 : this.Ano.hashCode());
							
							result = prime * result + ((this.Mes == null) ? 0 : this.Mes.hashCode());
							
							result = prime * result + ((this.SalesPerson == null) ? 0 : this.SalesPerson.hashCode());
							
							result = prime * result + ((this.ProductNumber == null) ? 0 : this.ProductNumber.hashCode());
							
							result = prime * result + ((this.ProductName == null) ? 0 : this.ProductName.hashCode());
							
							result = prime * result + ((this.CustomerID == null) ? 0 : this.CustomerID.hashCode());
							
							result = prime * result + ((this.CompanyName == null) ? 0 : this.CompanyName.hashCode());
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_1 other = (AggOperationStruct_tAggregateRow_1) obj;
			
							if (this.Ano == null) {
								if (other.Ano != null) 
									return false;
							} else if (!this.Ano.equals(other.Ano)) 
								return false;
						
							if (this.Mes == null) {
								if (other.Mes != null) 
									return false;
							} else if (!this.Mes.equals(other.Mes)) 
								return false;
						
							if (this.SalesPerson == null) {
								if (other.SalesPerson != null) 
									return false;
							} else if (!this.SalesPerson.equals(other.SalesPerson)) 
								return false;
						
							if (this.ProductNumber == null) {
								if (other.ProductNumber != null) 
									return false;
							} else if (!this.ProductNumber.equals(other.ProductNumber)) 
								return false;
						
							if (this.ProductName == null) {
								if (other.ProductName != null) 
									return false;
							} else if (!this.ProductName.equals(other.ProductName)) 
								return false;
						
							if (this.CustomerID == null) {
								if (other.CustomerID != null) 
									return false;
							} else if (!this.CustomerID.equals(other.CustomerID)) 
								return false;
						
							if (this.CompanyName == null) {
								if (other.CompanyName != null) 
									return false;
							} else if (!this.CompanyName.equals(other.CompanyName)) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_1 operation_result_tAggregateRow_1 = null;
	AggOperationStruct_tAggregateRow_1 operation_finder_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();
	java.util.Map<AggOperationStruct_tAggregateRow_1,AggOperationStruct_tAggregateRow_1> hash_tAggregateRow_1 = new java.util.HashMap<AggOperationStruct_tAggregateRow_1,AggOperationStruct_tAggregateRow_1>();
	

 



/**
 * [tAggregateRow_1_AGGOUT begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
					globalMap.get( "tHash_Lookup_row2" ))
					;					
					
	

row2Struct row2HashKey = new row2Struct();
row2Struct row2Default = new row2Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) 
					globalMap.get( "tHash_Lookup_row3" ))
					;					
					
	

row3Struct row3HashKey = new row3Struct();
row3Struct row3Default = new row3Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) 
					globalMap.get( "tHash_Lookup_row4" ))
					;					
					
	

row4Struct row4HashKey = new row4Struct();
row4Struct row4Default = new row4Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) 
					globalMap.get( "tHash_Lookup_row5" ))
					;					
					
	

row5Struct row5HashKey = new row5Struct();
row5Struct row5Default = new row5Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) 
					globalMap.get( "tHash_Lookup_row6" ))
					;					
					
	

row6Struct row6HashKey = new row6Struct();
row6Struct row6Default = new row6Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
saida_Rel_VendasStruct saida_Rel_Vendas_tmp = new saida_Rel_VendasStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				int footer_tFileInputDelimited_1 = 0;
				int totalLinetFileInputDelimited_1 = 0;
				int limittFileInputDelimited_1 = -1;
				int lastLinetFileInputDelimited_1 = -1;	
				
				char fieldSeparator_tFileInputDelimited_1[] = null;
				
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)";").length() > 0 ){
					fieldSeparator_tFileInputDelimited_1 = ((String)";").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
			
				char rowSeparator_tFileInputDelimited_1[] = null;
			
				//support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'. 
				if ( ((String)"\n").length() > 0 ){
					rowSeparator_tFileInputDelimited_1 = ((String)"\n").toCharArray();
				}else {
					throw new IllegalArgumentException("Row Separator must be assigned a char."); 
				}
			
				Object filename_tFileInputDelimited_1 = /** Start field tFileInputDelimited_1:FILENAME */"C:/Repos/DataOps/Dados/CURATED/FATO_Vendas.csv"/** End field tFileInputDelimited_1:FILENAME */;		
				com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;
	
				try{
					
						String[] rowtFileInputDelimited_1=null;
						int currentLinetFileInputDelimited_1 = 0;
	        			int outputLinetFileInputDelimited_1 = 0;
						try {//TD110 begin
							if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0;
			if(footer_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer shouldn't be bigger than 0.");
			}
		
								csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_1, fieldSeparator_tFileInputDelimited_1[0], "UTF-8");
							}else{
								csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
		                		new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_1)),"UTF-8")), fieldSeparator_tFileInputDelimited_1[0]);
		        			}
					
					
					csvReadertFileInputDelimited_1.setTrimWhitespace(false);
					if ( (rowSeparator_tFileInputDelimited_1[0] != '\n') && (rowSeparator_tFileInputDelimited_1[0] != '\r') )
	        			csvReadertFileInputDelimited_1.setLineEnd(""+rowSeparator_tFileInputDelimited_1[0]);
						
	        				csvReadertFileInputDelimited_1.setQuoteChar('\"');
						
	            				csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());
							      
		
			
						if(footer_tFileInputDelimited_1 > 0){
						for(totalLinetFileInputDelimited_1=0;totalLinetFileInputDelimited_1 < 1; totalLinetFileInputDelimited_1++){
							csvReadertFileInputDelimited_1.readNext();
						}
						csvReadertFileInputDelimited_1.setSkipEmptyRecords(false);
			            while (csvReadertFileInputDelimited_1.readNext()) {
							
	                
	                		totalLinetFileInputDelimited_1++;
	                
							
	                
			            }
	            		int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1 - footer_tFileInputDelimited_1   < 0? 0 : totalLinetFileInputDelimited_1 - footer_tFileInputDelimited_1 ;
	            		if(lastLinetFileInputDelimited_1 > 0){
	                		lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1 ? lastLinetFileInputDelimited_1 : lastLineTemptFileInputDelimited_1; 
	            		}else {
	                		lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
	            		}
	         
			          	csvReadertFileInputDelimited_1.close();
				        if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
				 			csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_1, fieldSeparator_tFileInputDelimited_1[0], "UTF-8");
		        		}else{
				 			csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
				          	new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_1)),"UTF-8")), fieldSeparator_tFileInputDelimited_1[0]);
						}
						csvReadertFileInputDelimited_1.setTrimWhitespace(false);
						if ( (rowSeparator_tFileInputDelimited_1[0] != '\n') && (rowSeparator_tFileInputDelimited_1[0] != '\r') )	
	        				csvReadertFileInputDelimited_1.setLineEnd(""+rowSeparator_tFileInputDelimited_1[0]);
						
							csvReadertFileInputDelimited_1.setQuoteChar('\"');
						
	        				csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());
							  
	        		}
	        
			        if(limittFileInputDelimited_1 != 0){
			        	for(currentLinetFileInputDelimited_1=0;currentLinetFileInputDelimited_1 < 1;currentLinetFileInputDelimited_1++){
			        		csvReadertFileInputDelimited_1.readNext();
			        	}
			        }
			        csvReadertFileInputDelimited_1.setSkipEmptyRecords(false);
	        
	    		} catch(java.lang.Exception e) {
					
						
						System.err.println(e.getMessage());
					
	    		}//TD110 end
	        
			    
	        	while ( limittFileInputDelimited_1 != 0 && csvReadertFileInputDelimited_1!=null && csvReadertFileInputDelimited_1.readNext() ) { 
	        		rowstate_tFileInputDelimited_1.reset();
	        
		        	rowtFileInputDelimited_1=csvReadertFileInputDelimited_1.getValues();
	        	
					
	        	
	        	
	        		currentLinetFileInputDelimited_1++;
	            
		            if(lastLinetFileInputDelimited_1 > -1 && currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
		                break;
	    	        }
	        	    outputLinetFileInputDelimited_1++;
	            	if (limittFileInputDelimited_1 > 0 && outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
	                	break;
	            	}  
	                                                                      
					
	    							row1 = null;			
								
								boolean whetherReject_tFileInputDelimited_1 = false;
								row1 = new row1Struct();
								try {			
									
				char fieldSeparator_tFileInputDelimited_1_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)";").length() > 0 ){
					fieldSeparator_tFileInputDelimited_1_ListType = ((String)";").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])){//empty line when row separator is '\n'
					
							row1.SalesOrderID = null;
					
							row1.SalesOrderDetailID = null;
					
							row1.OrderDate = null;
					
							row1.Status = null;
					
							row1.OnlineOrderFlag = null;
					
							row1.CustomerID = null;
					
							row1.ProductID = null;
					
							row1.SalesSK = null;
					
							row1.OrderQty = null;
					
							row1.LineTotal = null;
					
				}else{
					
	                int columnIndexWithD_tFileInputDelimited_1 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_1 = 0;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.SalesOrderID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"SalesOrderID", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.SalesOrderID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.SalesOrderID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 1;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.SalesOrderDetailID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"SalesOrderDetailID", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.SalesOrderDetailID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.SalesOrderDetailID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 2;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											row1.OrderDate = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], "dd-MM-yyyy");
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"OrderDate", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.OrderDate = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.OrderDate = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 3;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.Status = ParserUtils.parseTo_Short(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Status", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.Status = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.Status = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 4;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.OnlineOrderFlag = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"OnlineOrderFlag", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.OnlineOrderFlag = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.OnlineOrderFlag = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 5;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.CustomerID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"CustomerID", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.CustomerID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.CustomerID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 6;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.ProductID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"ProductID", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.ProductID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.ProductID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 7;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.SalesSK = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"SalesSK", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.SalesSK = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.SalesSK = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 8;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.OrderQty = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"OrderQty", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.OrderQty = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.OrderQty = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 9;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.LineTotal = ParserUtils.parseTo_Float(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"LineTotal", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.LineTotal = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.LineTotal = null;
							
						
						}
						
						
					
				}
				
									
									if(rowstate_tFileInputDelimited_1.getException()!=null) {
										throw rowstate_tFileInputDelimited_1.getException();
									}
									
									
	    						} catch (java.lang.Exception e) {
							        whetherReject_tFileInputDelimited_1 = true;
        							
                							System.err.println(e.getMessage());
                							row1 = null;
                						
	    						}
	
							

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row2" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow2 = false;
       		  	    	
       		  	    	
 							row2Struct row2ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row2HashKey.OrderDate = row1.OrderDate  == null ? null : new java.util.Date(row1.OrderDate .getTime());
                        		    		

								
		                        	row2HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row2.lookup( row2HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row2.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
	
		  								forceLooprow2 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow2 = true;
			           		  	} // G 21
                    		  	
                    		

							row2Struct row2 = null;
                    		  	 
							

								while ((tHash_Lookup_row2 != null && tHash_Lookup_row2.hasNext()) || forceLooprow2) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row2'
									
                    		  	 
							   
                    		  	 
	       		  	    	row2Struct fromLookup_row2 = null;
							row2 = row2Default;
										 
							
								
								if(!forceLooprow2) { // G 46
								
							
								 
							
								
								fromLookup_row2 = tHash_Lookup_row2.next();

							

							if(fromLookup_row2 != null) {
								row2 = fromLookup_row2;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow2 = false;
									 	
							
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row3" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow3 = false;
       		  	    	
       		  	    	
 							row3Struct row3ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row3HashKey.ProductID = row1.ProductID ;
                        		    		

								
		                        	row3HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row3.lookup( row3HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row3.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
	
		  								forceLooprow3 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow3 = true;
			           		  	} // G 21
                    		  	
                    		

							row3Struct row3 = null;
                    		  	 
							

								while ((tHash_Lookup_row3 != null && tHash_Lookup_row3.hasNext()) || forceLooprow3) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row3'
									
                    		  	 
							   
                    		  	 
	       		  	    	row3Struct fromLookup_row3 = null;
							row3 = row3Default;
										 
							
								
								if(!forceLooprow3) { // G 46
								
							
								 
							
								
								fromLookup_row3 = tHash_Lookup_row3.next();

							

							if(fromLookup_row3 != null) {
								row3 = fromLookup_row3;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow3 = false;
									 	
							
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row4" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow4 = false;
       		  	    	
       		  	    	
 							row4Struct row4ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row4HashKey.CustomerID = row1.CustomerID ;
                        		    		

								
		                        	row4HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row4.lookup( row4HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row4.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
	
		  								forceLooprow4 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow4 = true;
			           		  	} // G 21
                    		  	
                    		

							row4Struct row4 = null;
                    		  	 
							

								while ((tHash_Lookup_row4 != null && tHash_Lookup_row4.hasNext()) || forceLooprow4) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row4'
									
                    		  	 
							   
                    		  	 
	       		  	    	row4Struct fromLookup_row4 = null;
							row4 = row4Default;
										 
							
								
								if(!forceLooprow4) { // G 46
								
							
								 
							
								
								fromLookup_row4 = tHash_Lookup_row4.next();

							

							if(fromLookup_row4 != null) {
								row4 = fromLookup_row4;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow4 = false;
									 	
							
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row5" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow5 = false;
       		  	    	
       		  	    	
 							row5Struct row5ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
	                        		    	Object exprKeyValue_row5__SalesSK = row1.SalesSK ;
	                        		    	if(exprKeyValue_row5__SalesSK == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_1 = true;
	                        		    	} else {
                        		    			row5HashKey.SalesSK = (int)(Integer) exprKeyValue_row5__SalesSK;
                        		    		}
                        		    		

								
		                        	row5HashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_row5.lookup( row5HashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
								  
								  if(hasCasePrimitiveKeyWithNull_tMap_1 || !tHash_Lookup_row5.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
	
		  								forceLooprow5 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow5 = true;
			           		  	} // G 21
                    		  	
                    		

							row5Struct row5 = null;
                    		  	 
							

								while ((tHash_Lookup_row5 != null && tHash_Lookup_row5.hasNext()) || forceLooprow5) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row5'
									
                    		  	 
							   
                    		  	 
	       		  	    	row5Struct fromLookup_row5 = null;
							row5 = row5Default;
										 
							
								
								if(!forceLooprow5) { // G 46
								
							
								 
							
								
								fromLookup_row5 = tHash_Lookup_row5.next();

							

							if(fromLookup_row5 != null) {
								row5 = fromLookup_row5;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow5 = false;
									 	
							
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row6" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow6 = false;
       		  	    	
       		  	    	
 							row6Struct row6ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row6HashKey.SalesOrderID = row1.SalesOrderID ;
                        		    		

								
		                        	row6HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row6.lookup( row6HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row6.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
	
		  								forceLooprow6 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow6 = true;
			           		  	} // G 21
                    		  	
                    		

							row6Struct row6 = null;
                    		  	 
							

								while ((tHash_Lookup_row6 != null && tHash_Lookup_row6.hasNext()) || forceLooprow6) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row6'
									
                    		  	 
							   
                    		  	 
	       		  	    	row6Struct fromLookup_row6 = null;
							row6 = row6Default;
										 
							
								
								if(!forceLooprow6) { // G 46
								
							
								 
							
								
								fromLookup_row6 = tHash_Lookup_row6.next();

							

							if(fromLookup_row6 != null) {
								row6 = fromLookup_row6;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow6 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

saida_Rel_Vendas = null;

if(!rejectedInnerJoin_tMap_1 ) {

// # Output table : 'saida_Rel_Vendas'
saida_Rel_Vendas_tmp.Ano = row2.Ano ;
saida_Rel_Vendas_tmp.Mes = row2.Mes ;
saida_Rel_Vendas_tmp.SalesPerson = row4.SalesPerson ;
saida_Rel_Vendas_tmp.ProductNumber = row3.ProductNumber ;
saida_Rel_Vendas_tmp.ProductName = row3.Name ;
saida_Rel_Vendas_tmp.CustomerID = row4.CustomerID ;
saida_Rel_Vendas_tmp.CompanyName = row4.CompanyName ;
saida_Rel_Vendas_tmp.OrderQty = row1.OrderQty ;
saida_Rel_Vendas_tmp.ValorVenda = row1.LineTotal ;
saida_Rel_Vendas = saida_Rel_Vendas_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "saida_Rel_Vendas"
if(saida_Rel_Vendas != null) { 



	
	/**
	 * [tAggregateRow_1_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"saida_Rel_Vendas");
					}
					
	
operation_finder_tAggregateRow_1.Ano = saida_Rel_Vendas.Ano;
			operation_finder_tAggregateRow_1.Mes = saida_Rel_Vendas.Mes;
			operation_finder_tAggregateRow_1.SalesPerson = saida_Rel_Vendas.SalesPerson;
			operation_finder_tAggregateRow_1.ProductNumber = saida_Rel_Vendas.ProductNumber;
			operation_finder_tAggregateRow_1.ProductName = saida_Rel_Vendas.ProductName;
			operation_finder_tAggregateRow_1.CustomerID = saida_Rel_Vendas.CustomerID;
			operation_finder_tAggregateRow_1.CompanyName = saida_Rel_Vendas.CompanyName;
			

	operation_finder_tAggregateRow_1.hashCodeDirty = true;
	
	operation_result_tAggregateRow_1 = hash_tAggregateRow_1.get(operation_finder_tAggregateRow_1);

	

	if(operation_result_tAggregateRow_1 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();

		operation_result_tAggregateRow_1.Ano = operation_finder_tAggregateRow_1.Ano;
				operation_result_tAggregateRow_1.Mes = operation_finder_tAggregateRow_1.Mes;
				operation_result_tAggregateRow_1.SalesPerson = operation_finder_tAggregateRow_1.SalesPerson;
				operation_result_tAggregateRow_1.ProductNumber = operation_finder_tAggregateRow_1.ProductNumber;
				operation_result_tAggregateRow_1.ProductName = operation_finder_tAggregateRow_1.ProductName;
				operation_result_tAggregateRow_1.CustomerID = operation_finder_tAggregateRow_1.CustomerID;
				operation_result_tAggregateRow_1.CompanyName = operation_finder_tAggregateRow_1.CompanyName;
				
		
		

		hash_tAggregateRow_1.put(operation_result_tAggregateRow_1, operation_result_tAggregateRow_1);
	
	} // G_OutMain_AggR_001


	
				if(saida_Rel_Vendas.OrderQty != null) { // G_OutMain_AggR_546
				
					if(operation_result_tAggregateRow_1.OrderQty_sum == null) {
						operation_result_tAggregateRow_1.OrderQty_sum = (float) 0;
					}
					
					if( saida_Rel_Vendas.OrderQty != null)
						operation_result_tAggregateRow_1.OrderQty_sum += saida_Rel_Vendas.OrderQty;
				} // G_OutMain_AggR_546
				
				if(saida_Rel_Vendas.ValorVenda != null) { // G_OutMain_AggR_546
				
					if(operation_result_tAggregateRow_1.ValorVenda_sum == null) {
						operation_result_tAggregateRow_1.ValorVenda_sum = new BigDecimal(0).setScale(4);
					}
					operation_result_tAggregateRow_1.ValorVenda_sum = operation_result_tAggregateRow_1.ValorVenda_sum.add(
						new BigDecimal(
							String.valueOf(
								saida_Rel_Vendas.ValorVenda
							)
						)
					);
					
				} // G_OutMain_AggR_546
				


 


	tos_count_tAggregateRow_1_AGGOUT++;

/**
 * [tAggregateRow_1_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 



/**
 * [tAggregateRow_1_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 



/**
 * [tAggregateRow_1_AGGOUT process_data_end ] stop
 */

} // End of branch "saida_Rel_Vendas"



	
		} // close loop of lookup 'row6' // G_TM_M_043
		
		} // close loop of lookup 'row5' // G_TM_M_043
		
		} // close loop of lookup 'row4' // G_TM_M_043
		
		} // close loop of lookup 'row3' // G_TM_M_043
		
		} // close loop of lookup 'row2' // G_TM_M_043
	
	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	


				nb_line_tFileInputDelimited_1++;
			}
			
			}finally{
    			if(!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)){
    				if(csvReadertFileInputDelimited_1!=null){
    					csvReadertFileInputDelimited_1.close();
    				}
    			}
    			if(csvReadertFileInputDelimited_1!=null){
    				globalMap.put("tFileInputDelimited_1_NB_LINE",nb_line_tFileInputDelimited_1);
    			}
				
			}
						  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row2 != null) {
						tHash_Lookup_row2.endGet();
					}
					globalMap.remove( "tHash_Lookup_row2" );

					
					
				
					if(tHash_Lookup_row3 != null) {
						tHash_Lookup_row3.endGet();
					}
					globalMap.remove( "tHash_Lookup_row3" );

					
					
				
					if(tHash_Lookup_row4 != null) {
						tHash_Lookup_row4.endGet();
					}
					globalMap.remove( "tHash_Lookup_row4" );

					
					
				
					if(tHash_Lookup_row5 != null) {
						tHash_Lookup_row5.endGet();
					}
					globalMap.remove( "tHash_Lookup_row5" );

					
					
				
					if(tHash_Lookup_row6 != null) {
						tHash_Lookup_row6.endGet();
					}
					globalMap.remove( "tHash_Lookup_row6" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"saida_Rel_Vendas");
			  	}
			  	
 

ok_Hash.put("tAggregateRow_1_AGGOUT", true);
end_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_1_AGGOUT end ] stop
 */



	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File("C:/Repos/DataOps/Dados/CURATED/DF_Modelo_Churn.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
                        if(fileToDelete_tFileOutputDelimited_1.exists()) {
                            fileToDelete_tFileOutputDelimited_1.delete();
                        }
                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false),"UTF-8"));
                                    if(filetFileOutputDelimited_1.length()==0){
                                        outtFileOutputDelimited_1.write("Ano");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("Mes");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("SalesPerson");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("ProductNumber");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("ProductName");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("CustomerID");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("CompanyName");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("OrderQty");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("ValorVenda");
                                        outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tSampleRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSampleRow_1", false);
		start_Hash.put("tSampleRow_1", System.currentTimeMillis());
		
	
	currentComponent="tSampleRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tSampleRow_1 = 0;
		

String[] rangetSampleRow_1 = "1..100".split(",");
java.util.Set rangeSettSampleRow_1 = new java.util.HashSet();

Integer nb_line_tSampleRow_1 = 0;

for(int i =0;i<rangetSampleRow_1.length;i++){

	if(rangetSampleRow_1[i].matches("\\d+")){
	
		rangeSettSampleRow_1 .add(Integer.valueOf(rangetSampleRow_1[i]));
		
	}else if(rangetSampleRow_1[i].matches("\\d+\\.\\.\\d+")){
		
		String[] edgetSampleRow_1= rangetSampleRow_1[i].split("\\.\\.");
		
		for(int j=Integer.valueOf(edgetSampleRow_1[0]).intValue();j<Integer.valueOf(edgetSampleRow_1[1]).intValue()+1;j++){			
			rangeSettSampleRow_1 .add(Integer.valueOf(j));			
		}		
	}else{
	
	}
	
}



 



/**
 * [tSampleRow_1 begin ] stop
 */



	
	/**
	 * [tAggregateRow_1_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_1_AGGIN", false);
		start_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	
		int tos_count_tAggregateRow_1_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_1> values_tAggregateRow_1 = hash_tAggregateRow_1.values();

globalMap.put("tAggregateRow_1_NB_LINE", values_tAggregateRow_1.size());

for(AggOperationStruct_tAggregateRow_1 aggregated_row_tAggregateRow_1 : values_tAggregateRow_1) { // G_AggR_600



 



/**
 * [tAggregateRow_1_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

            				    row7.Ano = aggregated_row_tAggregateRow_1.Ano;
            				    
            				    row7.Mes = aggregated_row_tAggregateRow_1.Mes;
            				    
            				    row7.SalesPerson = aggregated_row_tAggregateRow_1.SalesPerson;
            				    
            				    row7.ProductNumber = aggregated_row_tAggregateRow_1.ProductNumber;
            				    
            				    row7.ProductName = aggregated_row_tAggregateRow_1.ProductName;
            				    
            				    row7.CustomerID = aggregated_row_tAggregateRow_1.CustomerID;
            				    
            				    row7.CompanyName = aggregated_row_tAggregateRow_1.CompanyName;
            				    row7.OrderQty = aggregated_row_tAggregateRow_1.OrderQty_sum;
                                	
    								if(aggregated_row_tAggregateRow_1.ValorVenda_sum != null) {
    								row7.ValorVenda = aggregated_row_tAggregateRow_1.ValorVenda_sum.floatValue();
										
    								}else{
    								
    									row7.ValorVenda = null;
    									
    								}
    								

 


	tos_count_tAggregateRow_1_AGGIN++;

/**
 * [tAggregateRow_1_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

 



/**
 * [tAggregateRow_1_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tSampleRow_1 main ] start
	 */

	

	
	
	currentComponent="tSampleRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row7");
					}
					

	
	nb_line_tSampleRow_1++;
	
 	if(!rangeSettSampleRow_1.contains(nb_line_tSampleRow_1)){        
            row8 = null;            	
 	}else{  	
 	   row8 = new row8Struct();
 	   

       row8.Ano = row7.Ano;
       

       row8.Mes = row7.Mes;
       

       row8.SalesPerson = row7.SalesPerson;
       

       row8.ProductNumber = row7.ProductNumber;
       

       row8.ProductName = row7.ProductName;
       

       row8.CustomerID = row7.CustomerID;
       

       row8.CompanyName = row7.CompanyName;
       

       row8.OrderQty = row7.OrderQty;
       

       row8.ValorVenda = row7.ValorVenda;
       
 	
 	}
 
 
 
 
 
 
 
 
 
 
 
 
 


	tos_count_tSampleRow_1++;

/**
 * [tSampleRow_1 main ] stop
 */
	
	/**
	 * [tSampleRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSampleRow_1";

	

 



/**
 * [tSampleRow_1 process_data_begin ] stop
 */
// Start of branch "row8"
if(row8 != null) { 



	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row8");
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(row8.Ano != null) {
                        sb_tFileOutputDelimited_1.append(
                            row8.Ano
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row8.Mes != null) {
                        sb_tFileOutputDelimited_1.append(
                            row8.Mes
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row8.SalesPerson != null) {
                        sb_tFileOutputDelimited_1.append(
                            row8.SalesPerson
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row8.ProductNumber != null) {
                        sb_tFileOutputDelimited_1.append(
                            row8.ProductNumber
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row8.ProductName != null) {
                        sb_tFileOutputDelimited_1.append(
                            row8.ProductName
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row8.CustomerID != null) {
                        sb_tFileOutputDelimited_1.append(
                            row8.CustomerID
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row8.CompanyName != null) {
                        sb_tFileOutputDelimited_1.append(
                            row8.CompanyName
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row8.OrderQty != null) {
                        sb_tFileOutputDelimited_1.append(
                            row8.OrderQty
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row8.ValorVenda != null) {
                        sb_tFileOutputDelimited_1.append(
                            row8.ValorVenda
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */

} // End of branch "row8"




	
	/**
	 * [tSampleRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tSampleRow_1";

	

 



/**
 * [tSampleRow_1 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_1_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

 



/**
 * [tAggregateRow_1_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_1_AGGIN", true);
end_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_1_AGGIN end ] stop
 */

	
	/**
	 * [tSampleRow_1 end ] start
	 */

	

	
	
	currentComponent="tSampleRow_1";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tSampleRow_1", true);
end_Hash.put("tSampleRow_1", System.currentTimeMillis());




/**
 * [tSampleRow_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */















				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_1_AGGIN"
							globalMap.remove("tAggregateRow_1");
						
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row2"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row3"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row4"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row5"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row6"); 
				     			
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 



/**
 * [tAggregateRow_1_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

 



/**
 * [tAggregateRow_1_AGGIN finally ] stop
 */

	
	/**
	 * [tSampleRow_1 finally ] start
	 */

	

	
	
	currentComponent="tSampleRow_1";

	

 



/**
 * [tSampleRow_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableComparableLookupRow<row2Struct> {
    final static byte[] commonByteArrayLock_ADVENTURE_PROJECT_DF_Modelo_Churn = new byte[0];
    static byte[] commonByteArray_ADVENTURE_PROJECT_DF_Modelo_Churn = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public java.util.Date OrderDate;

				public java.util.Date getOrderDate () {
					return this.OrderDate;
				}
				
			    public Integer Ano;

				public Integer getAno () {
					return this.Ano;
				}
				
			    public Integer Mes;

				public Integer getMes () {
					return this.Mes;
				}
				
			    public Integer SemanaAno;

				public Integer getSemanaAno () {
					return this.SemanaAno;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.OrderDate == null) ? 0 : this.OrderDate.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row2Struct other = (row2Struct) obj;
		
						if (this.OrderDate == null) {
							if (other.OrderDate != null)
								return false;
						
						} else if (!this.OrderDate.equals(other.OrderDate))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row2Struct other) {

		other.OrderDate = this.OrderDate;
	            other.Ano = this.Ano;
	            other.Mes = this.Mes;
	            other.SemanaAno = this.SemanaAno;
	            
	}

	public void copyKeysDataTo(row2Struct other) {

		other.OrderDate = this.OrderDate;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ADVENTURE_PROJECT_DF_Modelo_Churn) {

        	try {

        		int length = 0;
		
					this.OrderDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.OrderDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.Ano = readInteger(dis,ois);
					
						this.Mes = readInteger(dis,ois);
					
						this.SemanaAno = readInteger(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
					writeInteger(this.Ano, dos, oos);
					
					writeInteger(this.Mes, dos, oos);
					
					writeInteger(this.SemanaAno, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("OrderDate="+String.valueOf(OrderDate));
		sb.append(",Ano="+String.valueOf(Ano));
		sb.append(",Mes="+String.valueOf(Mes));
		sb.append(",SemanaAno="+String.valueOf(SemanaAno));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.OrderDate, other.OrderDate);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tAdvancedHash_row2 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row2", false);
		start_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tAdvancedHash_row2 = 0;
		

			   		// connection name:row2
			   		// source node:tFileInputDelimited_2 - inputs:(after_tFileInputDelimited_1) outputs:(row2,row2) | target node:tAdvancedHash_row2 - inputs:(row2) outputs:()
			   		// linked node: tMap_1 - inputs:(row1,row2,row3,row4,row5,row6) outputs:(saida_Rel_Vendas)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row2Struct>getLookup(matchingModeEnum_row2);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row2 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_2", false);
		start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_2";

	
		int tos_count_tFileInputDelimited_2 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_2 = 0;
				int footer_tFileInputDelimited_2 = 0;
				int totalLinetFileInputDelimited_2 = 0;
				int limittFileInputDelimited_2 = -1;
				int lastLinetFileInputDelimited_2 = -1;	
				
				char fieldSeparator_tFileInputDelimited_2[] = null;
				
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)";").length() > 0 ){
					fieldSeparator_tFileInputDelimited_2 = ((String)";").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
			
				char rowSeparator_tFileInputDelimited_2[] = null;
			
				//support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'. 
				if ( ((String)"\n").length() > 0 ){
					rowSeparator_tFileInputDelimited_2 = ((String)"\n").toCharArray();
				}else {
					throw new IllegalArgumentException("Row Separator must be assigned a char."); 
				}
			
				Object filename_tFileInputDelimited_2 = /** Start field tFileInputDelimited_2:FILENAME */"C:/Repos/DataOps/Dados/CURATED/DIM_Tempo.csv"/** End field tFileInputDelimited_2:FILENAME */;		
				com.talend.csv.CSVReader csvReadertFileInputDelimited_2 = null;
	
				try{
					
						String[] rowtFileInputDelimited_2=null;
						int currentLinetFileInputDelimited_2 = 0;
	        			int outputLinetFileInputDelimited_2 = 0;
						try {//TD110 begin
							if(filename_tFileInputDelimited_2 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_2 = 0;
			if(footer_value_tFileInputDelimited_2 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer shouldn't be bigger than 0.");
			}
		
								csvReadertFileInputDelimited_2=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_2, fieldSeparator_tFileInputDelimited_2[0], "UTF-8");
							}else{
								csvReadertFileInputDelimited_2=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
		                		new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_2)),"UTF-8")), fieldSeparator_tFileInputDelimited_2[0]);
		        			}
					
					
					csvReadertFileInputDelimited_2.setTrimWhitespace(false);
					if ( (rowSeparator_tFileInputDelimited_2[0] != '\n') && (rowSeparator_tFileInputDelimited_2[0] != '\r') )
	        			csvReadertFileInputDelimited_2.setLineEnd(""+rowSeparator_tFileInputDelimited_2[0]);
						
	        				csvReadertFileInputDelimited_2.setQuoteChar('\"');
						
	            				csvReadertFileInputDelimited_2.setEscapeChar(csvReadertFileInputDelimited_2.getQuoteChar());
							      
		
			
						if(footer_tFileInputDelimited_2 > 0){
						for(totalLinetFileInputDelimited_2=0;totalLinetFileInputDelimited_2 < 1; totalLinetFileInputDelimited_2++){
							csvReadertFileInputDelimited_2.readNext();
						}
						csvReadertFileInputDelimited_2.setSkipEmptyRecords(false);
			            while (csvReadertFileInputDelimited_2.readNext()) {
							
	                
	                		totalLinetFileInputDelimited_2++;
	                
							
	                
			            }
	            		int lastLineTemptFileInputDelimited_2 = totalLinetFileInputDelimited_2 - footer_tFileInputDelimited_2   < 0? 0 : totalLinetFileInputDelimited_2 - footer_tFileInputDelimited_2 ;
	            		if(lastLinetFileInputDelimited_2 > 0){
	                		lastLinetFileInputDelimited_2 = lastLinetFileInputDelimited_2 < lastLineTemptFileInputDelimited_2 ? lastLinetFileInputDelimited_2 : lastLineTemptFileInputDelimited_2; 
	            		}else {
	                		lastLinetFileInputDelimited_2 = lastLineTemptFileInputDelimited_2;
	            		}
	         
			          	csvReadertFileInputDelimited_2.close();
				        if(filename_tFileInputDelimited_2 instanceof java.io.InputStream){
				 			csvReadertFileInputDelimited_2=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_2, fieldSeparator_tFileInputDelimited_2[0], "UTF-8");
		        		}else{
				 			csvReadertFileInputDelimited_2=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
				          	new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_2)),"UTF-8")), fieldSeparator_tFileInputDelimited_2[0]);
						}
						csvReadertFileInputDelimited_2.setTrimWhitespace(false);
						if ( (rowSeparator_tFileInputDelimited_2[0] != '\n') && (rowSeparator_tFileInputDelimited_2[0] != '\r') )	
	        				csvReadertFileInputDelimited_2.setLineEnd(""+rowSeparator_tFileInputDelimited_2[0]);
						
							csvReadertFileInputDelimited_2.setQuoteChar('\"');
						
	        				csvReadertFileInputDelimited_2.setEscapeChar(csvReadertFileInputDelimited_2.getQuoteChar());
							  
	        		}
	        
			        if(limittFileInputDelimited_2 != 0){
			        	for(currentLinetFileInputDelimited_2=0;currentLinetFileInputDelimited_2 < 1;currentLinetFileInputDelimited_2++){
			        		csvReadertFileInputDelimited_2.readNext();
			        	}
			        }
			        csvReadertFileInputDelimited_2.setSkipEmptyRecords(false);
	        
	    		} catch(java.lang.Exception e) {
					
						
						System.err.println(e.getMessage());
					
	    		}//TD110 end
	        
			    
	        	while ( limittFileInputDelimited_2 != 0 && csvReadertFileInputDelimited_2!=null && csvReadertFileInputDelimited_2.readNext() ) { 
	        		rowstate_tFileInputDelimited_2.reset();
	        
		        	rowtFileInputDelimited_2=csvReadertFileInputDelimited_2.getValues();
	        	
					
	        	
	        	
	        		currentLinetFileInputDelimited_2++;
	            
		            if(lastLinetFileInputDelimited_2 > -1 && currentLinetFileInputDelimited_2 > lastLinetFileInputDelimited_2) {
		                break;
	    	        }
	        	    outputLinetFileInputDelimited_2++;
	            	if (limittFileInputDelimited_2 > 0 && outputLinetFileInputDelimited_2 > limittFileInputDelimited_2) {
	                	break;
	            	}  
	                                                                      
					
	    							row2 = null;			
								
	    							row2 = null;			
								
								boolean whetherReject_tFileInputDelimited_2 = false;
								row2 = new row2Struct();
								try {			
									
				char fieldSeparator_tFileInputDelimited_2_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)";").length() > 0 ){
					fieldSeparator_tFileInputDelimited_2_ListType = ((String)";").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_2.length == 1 && ("\015").equals(rowtFileInputDelimited_2[0])){//empty line when row separator is '\n'
					
							row2.OrderDate = null;
					
							row2.Ano = null;
					
							row2.Mes = null;
					
							row2.SemanaAno = null;
					
				}else{
					
	                int columnIndexWithD_tFileInputDelimited_2 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_2 = 0;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row2.OrderDate = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], "dd-MM-yyyy");
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"OrderDate", "row2", rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
										}
    								}else{
    									
											
												row2.OrderDate = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row2.OrderDate = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 1;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row2.Ano = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Ano", "row2", rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
										}
    								}else{
    									
											
												row2.Ano = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row2.Ano = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 2;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row2.Mes = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Mes", "row2", rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
										}
    								}else{
    									
											
												row2.Mes = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row2.Mes = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 3;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row2.SemanaAno = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"SemanaAno", "row2", rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
										}
    								}else{
    									
											
												row2.SemanaAno = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row2.SemanaAno = null;
							
						
						}
						
						
					
				}
				
									
									if(rowstate_tFileInputDelimited_2.getException()!=null) {
										throw rowstate_tFileInputDelimited_2.getException();
									}
									
									
	    						} catch (java.lang.Exception e) {
							        whetherReject_tFileInputDelimited_2 = true;
        							
                							System.err.println(e.getMessage());
                							row2 = null;
                						
	    						}
	
							

 



/**
 * [tFileInputDelimited_2 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 


	tos_count_tFileInputDelimited_2++;

/**
 * [tFileInputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 process_data_begin ] stop
 */
// Start of branch "row2"
if(row2 != null) { 



	
	/**
	 * [tAdvancedHash_row2 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row2");
					}
					


			   
			   

					row2Struct row2_HashRow = new row2Struct();
		   	   	   
				
				row2_HashRow.OrderDate = row2.OrderDate;
				
				row2_HashRow.Ano = row2.Ano;
				
				row2_HashRow.Mes = row2.Mes;
				
				row2_HashRow.SemanaAno = row2.SemanaAno;
				
			tHash_Lookup_row2.put(row2_HashRow);
			
            




 


	tos_count_tAdvancedHash_row2++;

/**
 * [tAdvancedHash_row2 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 process_data_end ] stop
 */

} // End of branch "row2"




	
	/**
	 * [tFileInputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	


				nb_line_tFileInputDelimited_2++;
			}
			
			}finally{
    			if(!(filename_tFileInputDelimited_2 instanceof java.io.InputStream)){
    				if(csvReadertFileInputDelimited_2!=null){
    					csvReadertFileInputDelimited_2.close();
    				}
    			}
    			if(csvReadertFileInputDelimited_2!=null){
    				globalMap.put("tFileInputDelimited_2_NB_LINE",nb_line_tFileInputDelimited_2);
    			}
				
			}
						  

 

ok_Hash.put("tFileInputDelimited_2", true);
end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());




/**
 * [tFileInputDelimited_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

tHash_Lookup_row2.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row2", true);
end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());




/**
 * [tAdvancedHash_row2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}
	


public static class row3Struct implements routines.system.IPersistableComparableLookupRow<row3Struct> {
    final static byte[] commonByteArrayLock_ADVENTURE_PROJECT_DF_Modelo_Churn = new byte[0];
    static byte[] commonByteArray_ADVENTURE_PROJECT_DF_Modelo_Churn = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer ProductID;

				public Integer getProductID () {
					return this.ProductID;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String ProductNumber;

				public String getProductNumber () {
					return this.ProductNumber;
				}
				
			    public String Modelo;

				public String getModelo () {
					return this.Modelo;
				}
				
			    public String Categoria;

				public String getCategoria () {
					return this.Categoria;
				}
				
			    public String Subcategoria;

				public String getSubcategoria () {
					return this.Subcategoria;
				}
				
			    public String Color;

				public String getColor () {
					return this.Color;
				}
				
			    public String Size;

				public String getSize () {
					return this.Size;
				}
				
			    public BigDecimal Weight;

				public BigDecimal getWeight () {
					return this.Weight;
				}
				
			    public java.util.Date SellStartDate;

				public java.util.Date getSellStartDate () {
					return this.SellStartDate;
				}
				
			    public java.util.Date SellEndDate;

				public java.util.Date getSellEndDate () {
					return this.SellEndDate;
				}
				
			    public java.util.Date DiscontinuedDate;

				public java.util.Date getDiscontinuedDate () {
					return this.DiscontinuedDate;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ProductID == null) ? 0 : this.ProductID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row3Struct other = (row3Struct) obj;
		
						if (this.ProductID == null) {
							if (other.ProductID != null)
								return false;
						
						} else if (!this.ProductID.equals(other.ProductID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row3Struct other) {

		other.ProductID = this.ProductID;
	            other.Name = this.Name;
	            other.ProductNumber = this.ProductNumber;
	            other.Modelo = this.Modelo;
	            other.Categoria = this.Categoria;
	            other.Subcategoria = this.Subcategoria;
	            other.Color = this.Color;
	            other.Size = this.Size;
	            other.Weight = this.Weight;
	            other.SellStartDate = this.SellStartDate;
	            other.SellEndDate = this.SellEndDate;
	            other.DiscontinuedDate = this.DiscontinuedDate;
	            
	}

	public void copyKeysDataTo(row3Struct other) {

		other.ProductID = this.ProductID;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ADVENTURE_PROJECT_DF_Modelo_Churn) {

        	try {

        		int length = 0;
		
						this.ProductID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ProductID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.Name = readString(dis,ois);
					
						this.ProductNumber = readString(dis,ois);
					
						this.Modelo = readString(dis,ois);
					
						this.Categoria = readString(dis,ois);
					
						this.Subcategoria = readString(dis,ois);
					
						this.Color = readString(dis,ois);
					
						this.Size = readString(dis,ois);
					
       			    	this.Weight = (BigDecimal) ois.readObject();
					
						this.SellStartDate = readDate(dis,ois);
					
						this.SellEndDate = readDate(dis,ois);
					
						this.DiscontinuedDate = readDate(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.Name, dos, oos);
					
						writeString(this.ProductNumber, dos, oos);
					
						writeString(this.Modelo, dos, oos);
					
						writeString(this.Categoria, dos, oos);
					
						writeString(this.Subcategoria, dos, oos);
					
						writeString(this.Color, dos, oos);
					
						writeString(this.Size, dos, oos);
					
       			    	oos.writeObject(this.Weight);
					
						writeDate(this.SellStartDate, dos, oos);
					
						writeDate(this.SellEndDate, dos, oos);
					
						writeDate(this.DiscontinuedDate, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ProductID="+String.valueOf(ProductID));
		sb.append(",Name="+Name);
		sb.append(",ProductNumber="+ProductNumber);
		sb.append(",Modelo="+Modelo);
		sb.append(",Categoria="+Categoria);
		sb.append(",Subcategoria="+Subcategoria);
		sb.append(",Color="+Color);
		sb.append(",Size="+Size);
		sb.append(",Weight="+String.valueOf(Weight));
		sb.append(",SellStartDate="+String.valueOf(SellStartDate));
		sb.append(",SellEndDate="+String.valueOf(SellEndDate));
		sb.append(",DiscontinuedDate="+String.valueOf(DiscontinuedDate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ProductID, other.ProductID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();




	
	/**
	 * [tAdvancedHash_row3 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row3", false);
		start_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tAdvancedHash_row3 = 0;
		

			   		// connection name:row3
			   		// source node:tFileInputDelimited_6 - inputs:(after_tFileInputDelimited_1) outputs:(row3,row3) | target node:tAdvancedHash_row3 - inputs:(row3) outputs:()
			   		// linked node: tMap_1 - inputs:(row1,row2,row3,row4,row5,row6) outputs:(saida_Rel_Vendas)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row3 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row3Struct>getLookup(matchingModeEnum_row3);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row3", tHash_Lookup_row3);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row3 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_6", false);
		start_Hash.put("tFileInputDelimited_6", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_6";

	
		int tos_count_tFileInputDelimited_6 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_6 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_6 = 0;
				int footer_tFileInputDelimited_6 = 0;
				int totalLinetFileInputDelimited_6 = 0;
				int limittFileInputDelimited_6 = -1;
				int lastLinetFileInputDelimited_6 = -1;	
				
				char fieldSeparator_tFileInputDelimited_6[] = null;
				
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)";").length() > 0 ){
					fieldSeparator_tFileInputDelimited_6 = ((String)";").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
			
				char rowSeparator_tFileInputDelimited_6[] = null;
			
				//support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'. 
				if ( ((String)"\n").length() > 0 ){
					rowSeparator_tFileInputDelimited_6 = ((String)"\n").toCharArray();
				}else {
					throw new IllegalArgumentException("Row Separator must be assigned a char."); 
				}
			
				Object filename_tFileInputDelimited_6 = /** Start field tFileInputDelimited_6:FILENAME */"C:/Repos/DataOps/Dados/CURATED/DIM_Produto.csv"/** End field tFileInputDelimited_6:FILENAME */;		
				com.talend.csv.CSVReader csvReadertFileInputDelimited_6 = null;
	
				try{
					
						String[] rowtFileInputDelimited_6=null;
						int currentLinetFileInputDelimited_6 = 0;
	        			int outputLinetFileInputDelimited_6 = 0;
						try {//TD110 begin
							if(filename_tFileInputDelimited_6 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_6 = 0;
			if(footer_value_tFileInputDelimited_6 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer shouldn't be bigger than 0.");
			}
		
								csvReadertFileInputDelimited_6=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_6, fieldSeparator_tFileInputDelimited_6[0], "UTF-8");
							}else{
								csvReadertFileInputDelimited_6=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
		                		new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_6)),"UTF-8")), fieldSeparator_tFileInputDelimited_6[0]);
		        			}
					
					
					csvReadertFileInputDelimited_6.setTrimWhitespace(false);
					if ( (rowSeparator_tFileInputDelimited_6[0] != '\n') && (rowSeparator_tFileInputDelimited_6[0] != '\r') )
	        			csvReadertFileInputDelimited_6.setLineEnd(""+rowSeparator_tFileInputDelimited_6[0]);
						
	        				csvReadertFileInputDelimited_6.setQuoteChar('\"');
						
	            				csvReadertFileInputDelimited_6.setEscapeChar(csvReadertFileInputDelimited_6.getQuoteChar());
							      
		
			
						if(footer_tFileInputDelimited_6 > 0){
						for(totalLinetFileInputDelimited_6=0;totalLinetFileInputDelimited_6 < 1; totalLinetFileInputDelimited_6++){
							csvReadertFileInputDelimited_6.readNext();
						}
						csvReadertFileInputDelimited_6.setSkipEmptyRecords(false);
			            while (csvReadertFileInputDelimited_6.readNext()) {
							
	                
	                		totalLinetFileInputDelimited_6++;
	                
							
	                
			            }
	            		int lastLineTemptFileInputDelimited_6 = totalLinetFileInputDelimited_6 - footer_tFileInputDelimited_6   < 0? 0 : totalLinetFileInputDelimited_6 - footer_tFileInputDelimited_6 ;
	            		if(lastLinetFileInputDelimited_6 > 0){
	                		lastLinetFileInputDelimited_6 = lastLinetFileInputDelimited_6 < lastLineTemptFileInputDelimited_6 ? lastLinetFileInputDelimited_6 : lastLineTemptFileInputDelimited_6; 
	            		}else {
	                		lastLinetFileInputDelimited_6 = lastLineTemptFileInputDelimited_6;
	            		}
	         
			          	csvReadertFileInputDelimited_6.close();
				        if(filename_tFileInputDelimited_6 instanceof java.io.InputStream){
				 			csvReadertFileInputDelimited_6=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_6, fieldSeparator_tFileInputDelimited_6[0], "UTF-8");
		        		}else{
				 			csvReadertFileInputDelimited_6=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
				          	new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_6)),"UTF-8")), fieldSeparator_tFileInputDelimited_6[0]);
						}
						csvReadertFileInputDelimited_6.setTrimWhitespace(false);
						if ( (rowSeparator_tFileInputDelimited_6[0] != '\n') && (rowSeparator_tFileInputDelimited_6[0] != '\r') )	
	        				csvReadertFileInputDelimited_6.setLineEnd(""+rowSeparator_tFileInputDelimited_6[0]);
						
							csvReadertFileInputDelimited_6.setQuoteChar('\"');
						
	        				csvReadertFileInputDelimited_6.setEscapeChar(csvReadertFileInputDelimited_6.getQuoteChar());
							  
	        		}
	        
			        if(limittFileInputDelimited_6 != 0){
			        	for(currentLinetFileInputDelimited_6=0;currentLinetFileInputDelimited_6 < 1;currentLinetFileInputDelimited_6++){
			        		csvReadertFileInputDelimited_6.readNext();
			        	}
			        }
			        csvReadertFileInputDelimited_6.setSkipEmptyRecords(false);
	        
	    		} catch(java.lang.Exception e) {
					
						
						System.err.println(e.getMessage());
					
	    		}//TD110 end
	        
			    
	        	while ( limittFileInputDelimited_6 != 0 && csvReadertFileInputDelimited_6!=null && csvReadertFileInputDelimited_6.readNext() ) { 
	        		rowstate_tFileInputDelimited_6.reset();
	        
		        	rowtFileInputDelimited_6=csvReadertFileInputDelimited_6.getValues();
	        	
					
	        	
	        	
	        		currentLinetFileInputDelimited_6++;
	            
		            if(lastLinetFileInputDelimited_6 > -1 && currentLinetFileInputDelimited_6 > lastLinetFileInputDelimited_6) {
		                break;
	    	        }
	        	    outputLinetFileInputDelimited_6++;
	            	if (limittFileInputDelimited_6 > 0 && outputLinetFileInputDelimited_6 > limittFileInputDelimited_6) {
	                	break;
	            	}  
	                                                                      
					
	    							row3 = null;			
								
	    							row3 = null;			
								
								boolean whetherReject_tFileInputDelimited_6 = false;
								row3 = new row3Struct();
								try {			
									
				char fieldSeparator_tFileInputDelimited_6_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)";").length() > 0 ){
					fieldSeparator_tFileInputDelimited_6_ListType = ((String)";").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_6.length == 1 && ("\015").equals(rowtFileInputDelimited_6[0])){//empty line when row separator is '\n'
					
							row3.ProductID = null;
					
							row3.Name = null;
					
							row3.ProductNumber = null;
					
							row3.Modelo = null;
					
							row3.Categoria = null;
					
							row3.Subcategoria = null;
					
							row3.Color = null;
					
							row3.Size = null;
					
							row3.Weight = null;
					
							row3.SellStartDate = null;
					
							row3.SellEndDate = null;
					
							row3.DiscontinuedDate = null;
					
				}else{
					
	                int columnIndexWithD_tFileInputDelimited_6 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_6 = 0;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length){
						
						
							
								
									if(rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6].length() > 0) {
										try {
									
										row3.ProductID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_6) {
											rowstate_tFileInputDelimited_6.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"ProductID", "row3", rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6], ex_tFileInputDelimited_6), ex_tFileInputDelimited_6));
										}
    								}else{
    									
											
												row3.ProductID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row3.ProductID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_6 = 1;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length){
						
						
							
									row3.Name = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];
									
							
						
						}else{
						
							
								row3.Name = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_6 = 2;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length){
						
						
							
									row3.ProductNumber = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];
									
							
						
						}else{
						
							
								row3.ProductNumber = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_6 = 3;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length){
						
						
							
									row3.Modelo = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];
									
							
						
						}else{
						
							
								row3.Modelo = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_6 = 4;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length){
						
						
							
									row3.Categoria = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];
									
							
						
						}else{
						
							
								row3.Categoria = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_6 = 5;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length){
						
						
							
									row3.Subcategoria = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];
									
							
						
						}else{
						
							
								row3.Subcategoria = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_6 = 6;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length){
						
						
							
									row3.Color = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];
									
							
						
						}else{
						
							
								row3.Color = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_6 = 7;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length){
						
						
							
									row3.Size = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];
									
							
						
						}else{
						
							
								row3.Size = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_6 = 8;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length){
						
						
							
								
									if(rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6].length() > 0) {
										try {
									
										row3.Weight = ParserUtils.parseTo_BigDecimal(rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_6) {
											rowstate_tFileInputDelimited_6.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Weight", "row3", rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6], ex_tFileInputDelimited_6), ex_tFileInputDelimited_6));
										}
    								}else{
    									
											
												row3.Weight = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row3.Weight = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_6 = 9;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length){
						
						
							
								
									if(rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6].length() > 0) {
										try {
									
											row3.SellStartDate = ParserUtils.parseTo_Date(rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6], "dd-MM-yyyy");
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_6) {
											rowstate_tFileInputDelimited_6.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"SellStartDate", "row3", rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6], ex_tFileInputDelimited_6), ex_tFileInputDelimited_6));
										}
    								}else{
    									
											
												row3.SellStartDate = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row3.SellStartDate = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_6 = 10;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length){
						
						
							
								
									if(rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6].length() > 0) {
										try {
									
											row3.SellEndDate = ParserUtils.parseTo_Date(rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6], "dd-MM-yyyy");
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_6) {
											rowstate_tFileInputDelimited_6.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"SellEndDate", "row3", rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6], ex_tFileInputDelimited_6), ex_tFileInputDelimited_6));
										}
    								}else{
    									
											
												row3.SellEndDate = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row3.SellEndDate = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_6 = 11;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length){
						
						
							
								
									if(rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6].length() > 0) {
										try {
									
											row3.DiscontinuedDate = ParserUtils.parseTo_Date(rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6], "dd-MM-yyyy");
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_6) {
											rowstate_tFileInputDelimited_6.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"DiscontinuedDate", "row3", rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6], ex_tFileInputDelimited_6), ex_tFileInputDelimited_6));
										}
    								}else{
    									
											
												row3.DiscontinuedDate = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row3.DiscontinuedDate = null;
							
						
						}
						
						
					
				}
				
									
									if(rowstate_tFileInputDelimited_6.getException()!=null) {
										throw rowstate_tFileInputDelimited_6.getException();
									}
									
									
	    						} catch (java.lang.Exception e) {
							        whetherReject_tFileInputDelimited_6 = true;
        							
                							System.err.println(e.getMessage());
                							row3 = null;
                						
	    						}
	
							

 



/**
 * [tFileInputDelimited_6 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_6 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_6";

	

 


	tos_count_tFileInputDelimited_6++;

/**
 * [tFileInputDelimited_6 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_6";

	

 



/**
 * [tFileInputDelimited_6 process_data_begin ] stop
 */
// Start of branch "row3"
if(row3 != null) { 



	
	/**
	 * [tAdvancedHash_row3 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row3");
					}
					


			   
			   

					row3Struct row3_HashRow = new row3Struct();
		   	   	   
				
				row3_HashRow.ProductID = row3.ProductID;
				
				row3_HashRow.Name = row3.Name;
				
				row3_HashRow.ProductNumber = row3.ProductNumber;
				
				row3_HashRow.Modelo = row3.Modelo;
				
				row3_HashRow.Categoria = row3.Categoria;
				
				row3_HashRow.Subcategoria = row3.Subcategoria;
				
				row3_HashRow.Color = row3.Color;
				
				row3_HashRow.Size = row3.Size;
				
				row3_HashRow.Weight = row3.Weight;
				
				row3_HashRow.SellStartDate = row3.SellStartDate;
				
				row3_HashRow.SellEndDate = row3.SellEndDate;
				
				row3_HashRow.DiscontinuedDate = row3.DiscontinuedDate;
				
			tHash_Lookup_row3.put(row3_HashRow);
			
            




 


	tos_count_tAdvancedHash_row3++;

/**
 * [tAdvancedHash_row3 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

 



/**
 * [tAdvancedHash_row3 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row3 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

 



/**
 * [tAdvancedHash_row3 process_data_end ] stop
 */

} // End of branch "row3"




	
	/**
	 * [tFileInputDelimited_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_6";

	

 



/**
 * [tFileInputDelimited_6 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_6 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_6";

	


				nb_line_tFileInputDelimited_6++;
			}
			
			}finally{
    			if(!(filename_tFileInputDelimited_6 instanceof java.io.InputStream)){
    				if(csvReadertFileInputDelimited_6!=null){
    					csvReadertFileInputDelimited_6.close();
    				}
    			}
    			if(csvReadertFileInputDelimited_6!=null){
    				globalMap.put("tFileInputDelimited_6_NB_LINE",nb_line_tFileInputDelimited_6);
    			}
				
			}
						  

 

ok_Hash.put("tFileInputDelimited_6", true);
end_Hash.put("tFileInputDelimited_6", System.currentTimeMillis());




/**
 * [tFileInputDelimited_6 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row3 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

tHash_Lookup_row3.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row3", true);
end_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());




/**
 * [tAdvancedHash_row3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_6 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_6";

	

 



/**
 * [tFileInputDelimited_6 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row3 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

 



/**
 * [tAdvancedHash_row3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableComparableLookupRow<row4Struct> {
    final static byte[] commonByteArrayLock_ADVENTURE_PROJECT_DF_Modelo_Churn = new byte[0];
    static byte[] commonByteArray_ADVENTURE_PROJECT_DF_Modelo_Churn = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer CustomerID;

				public Integer getCustomerID () {
					return this.CustomerID;
				}
				
			    public Integer AddressID;

				public Integer getAddressID () {
					return this.AddressID;
				}
				
			    public String NameStyle;

				public String getNameStyle () {
					return this.NameStyle;
				}
				
			    public String Title;

				public String getTitle () {
					return this.Title;
				}
				
			    public String FullName;

				public String getFullName () {
					return this.FullName;
				}
				
			    public String CompanyName;

				public String getCompanyName () {
					return this.CompanyName;
				}
				
			    public String SalesPerson;

				public String getSalesPerson () {
					return this.SalesPerson;
				}
				
			    public String EmailAddress;

				public String getEmailAddress () {
					return this.EmailAddress;
				}
				
			    public String Phone;

				public String getPhone () {
					return this.Phone;
				}
				
			    public String AddressType;

				public String getAddressType () {
					return this.AddressType;
				}
				
			    public String AddressLine1;

				public String getAddressLine1 () {
					return this.AddressLine1;
				}
				
			    public String AddressLine2;

				public String getAddressLine2 () {
					return this.AddressLine2;
				}
				
			    public String City;

				public String getCity () {
					return this.City;
				}
				
			    public String StateProvince;

				public String getStateProvince () {
					return this.StateProvince;
				}
				
			    public String CountryRegion;

				public String getCountryRegion () {
					return this.CountryRegion;
				}
				
			    public String PostalCode;

				public String getPostalCode () {
					return this.PostalCode;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CustomerID == null) ? 0 : this.CustomerID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row4Struct other = (row4Struct) obj;
		
						if (this.CustomerID == null) {
							if (other.CustomerID != null)
								return false;
						
						} else if (!this.CustomerID.equals(other.CustomerID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row4Struct other) {

		other.CustomerID = this.CustomerID;
	            other.AddressID = this.AddressID;
	            other.NameStyle = this.NameStyle;
	            other.Title = this.Title;
	            other.FullName = this.FullName;
	            other.CompanyName = this.CompanyName;
	            other.SalesPerson = this.SalesPerson;
	            other.EmailAddress = this.EmailAddress;
	            other.Phone = this.Phone;
	            other.AddressType = this.AddressType;
	            other.AddressLine1 = this.AddressLine1;
	            other.AddressLine2 = this.AddressLine2;
	            other.City = this.City;
	            other.StateProvince = this.StateProvince;
	            other.CountryRegion = this.CountryRegion;
	            other.PostalCode = this.PostalCode;
	            
	}

	public void copyKeysDataTo(row4Struct other) {

		other.CustomerID = this.CustomerID;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ADVENTURE_PROJECT_DF_Modelo_Churn) {

        	try {

        		int length = 0;
		
						this.CustomerID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.CustomerID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.AddressID = readInteger(dis,ois);
					
						this.NameStyle = readString(dis,ois);
					
						this.Title = readString(dis,ois);
					
						this.FullName = readString(dis,ois);
					
						this.CompanyName = readString(dis,ois);
					
						this.SalesPerson = readString(dis,ois);
					
						this.EmailAddress = readString(dis,ois);
					
						this.Phone = readString(dis,ois);
					
						this.AddressType = readString(dis,ois);
					
						this.AddressLine1 = readString(dis,ois);
					
						this.AddressLine2 = readString(dis,ois);
					
						this.City = readString(dis,ois);
					
						this.StateProvince = readString(dis,ois);
					
						this.CountryRegion = readString(dis,ois);
					
						this.PostalCode = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
					writeInteger(this.AddressID, dos, oos);
					
						writeString(this.NameStyle, dos, oos);
					
						writeString(this.Title, dos, oos);
					
						writeString(this.FullName, dos, oos);
					
						writeString(this.CompanyName, dos, oos);
					
						writeString(this.SalesPerson, dos, oos);
					
						writeString(this.EmailAddress, dos, oos);
					
						writeString(this.Phone, dos, oos);
					
						writeString(this.AddressType, dos, oos);
					
						writeString(this.AddressLine1, dos, oos);
					
						writeString(this.AddressLine2, dos, oos);
					
						writeString(this.City, dos, oos);
					
						writeString(this.StateProvince, dos, oos);
					
						writeString(this.CountryRegion, dos, oos);
					
						writeString(this.PostalCode, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CustomerID="+String.valueOf(CustomerID));
		sb.append(",AddressID="+String.valueOf(AddressID));
		sb.append(",NameStyle="+NameStyle);
		sb.append(",Title="+Title);
		sb.append(",FullName="+FullName);
		sb.append(",CompanyName="+CompanyName);
		sb.append(",SalesPerson="+SalesPerson);
		sb.append(",EmailAddress="+EmailAddress);
		sb.append(",Phone="+Phone);
		sb.append(",AddressType="+AddressType);
		sb.append(",AddressLine1="+AddressLine1);
		sb.append(",AddressLine2="+AddressLine2);
		sb.append(",City="+City);
		sb.append(",StateProvince="+StateProvince);
		sb.append(",CountryRegion="+CountryRegion);
		sb.append(",PostalCode="+PostalCode);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CustomerID, other.CustomerID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();




	
	/**
	 * [tAdvancedHash_row4 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row4", false);
		start_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tAdvancedHash_row4 = 0;
		

			   		// connection name:row4
			   		// source node:tFileInputDelimited_4 - inputs:(after_tFileInputDelimited_1) outputs:(row4,row4) | target node:tAdvancedHash_row4 - inputs:(row4) outputs:()
			   		// linked node: tMap_1 - inputs:(row1,row2,row3,row4,row5,row6) outputs:(saida_Rel_Vendas)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row4Struct>getLookup(matchingModeEnum_row4);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row4 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_4", false);
		start_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_4";

	
		int tos_count_tFileInputDelimited_4 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_4 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_4 = 0;
				int footer_tFileInputDelimited_4 = 0;
				int totalLinetFileInputDelimited_4 = 0;
				int limittFileInputDelimited_4 = -1;
				int lastLinetFileInputDelimited_4 = -1;	
				
				char fieldSeparator_tFileInputDelimited_4[] = null;
				
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)";").length() > 0 ){
					fieldSeparator_tFileInputDelimited_4 = ((String)";").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
			
				char rowSeparator_tFileInputDelimited_4[] = null;
			
				//support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'. 
				if ( ((String)"\n").length() > 0 ){
					rowSeparator_tFileInputDelimited_4 = ((String)"\n").toCharArray();
				}else {
					throw new IllegalArgumentException("Row Separator must be assigned a char."); 
				}
			
				Object filename_tFileInputDelimited_4 = /** Start field tFileInputDelimited_4:FILENAME */"C:/Repos/DataOps/Dados/CURATED/DIM_Cliente.csv"/** End field tFileInputDelimited_4:FILENAME */;		
				com.talend.csv.CSVReader csvReadertFileInputDelimited_4 = null;
	
				try{
					
						String[] rowtFileInputDelimited_4=null;
						int currentLinetFileInputDelimited_4 = 0;
	        			int outputLinetFileInputDelimited_4 = 0;
						try {//TD110 begin
							if(filename_tFileInputDelimited_4 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_4 = 0;
			if(footer_value_tFileInputDelimited_4 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer shouldn't be bigger than 0.");
			}
		
								csvReadertFileInputDelimited_4=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_4, fieldSeparator_tFileInputDelimited_4[0], "UTF-8");
							}else{
								csvReadertFileInputDelimited_4=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
		                		new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_4)),"UTF-8")), fieldSeparator_tFileInputDelimited_4[0]);
		        			}
					
					
					csvReadertFileInputDelimited_4.setTrimWhitespace(false);
					if ( (rowSeparator_tFileInputDelimited_4[0] != '\n') && (rowSeparator_tFileInputDelimited_4[0] != '\r') )
	        			csvReadertFileInputDelimited_4.setLineEnd(""+rowSeparator_tFileInputDelimited_4[0]);
						
	        				csvReadertFileInputDelimited_4.setQuoteChar('\"');
						
	            				csvReadertFileInputDelimited_4.setEscapeChar(csvReadertFileInputDelimited_4.getQuoteChar());
							      
		
			
						if(footer_tFileInputDelimited_4 > 0){
						for(totalLinetFileInputDelimited_4=0;totalLinetFileInputDelimited_4 < 1; totalLinetFileInputDelimited_4++){
							csvReadertFileInputDelimited_4.readNext();
						}
						csvReadertFileInputDelimited_4.setSkipEmptyRecords(false);
			            while (csvReadertFileInputDelimited_4.readNext()) {
							
	                
	                		totalLinetFileInputDelimited_4++;
	                
							
	                
			            }
	            		int lastLineTemptFileInputDelimited_4 = totalLinetFileInputDelimited_4 - footer_tFileInputDelimited_4   < 0? 0 : totalLinetFileInputDelimited_4 - footer_tFileInputDelimited_4 ;
	            		if(lastLinetFileInputDelimited_4 > 0){
	                		lastLinetFileInputDelimited_4 = lastLinetFileInputDelimited_4 < lastLineTemptFileInputDelimited_4 ? lastLinetFileInputDelimited_4 : lastLineTemptFileInputDelimited_4; 
	            		}else {
	                		lastLinetFileInputDelimited_4 = lastLineTemptFileInputDelimited_4;
	            		}
	         
			          	csvReadertFileInputDelimited_4.close();
				        if(filename_tFileInputDelimited_4 instanceof java.io.InputStream){
				 			csvReadertFileInputDelimited_4=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_4, fieldSeparator_tFileInputDelimited_4[0], "UTF-8");
		        		}else{
				 			csvReadertFileInputDelimited_4=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
				          	new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_4)),"UTF-8")), fieldSeparator_tFileInputDelimited_4[0]);
						}
						csvReadertFileInputDelimited_4.setTrimWhitespace(false);
						if ( (rowSeparator_tFileInputDelimited_4[0] != '\n') && (rowSeparator_tFileInputDelimited_4[0] != '\r') )	
	        				csvReadertFileInputDelimited_4.setLineEnd(""+rowSeparator_tFileInputDelimited_4[0]);
						
							csvReadertFileInputDelimited_4.setQuoteChar('\"');
						
	        				csvReadertFileInputDelimited_4.setEscapeChar(csvReadertFileInputDelimited_4.getQuoteChar());
							  
	        		}
	        
			        if(limittFileInputDelimited_4 != 0){
			        	for(currentLinetFileInputDelimited_4=0;currentLinetFileInputDelimited_4 < 1;currentLinetFileInputDelimited_4++){
			        		csvReadertFileInputDelimited_4.readNext();
			        	}
			        }
			        csvReadertFileInputDelimited_4.setSkipEmptyRecords(false);
	        
	    		} catch(java.lang.Exception e) {
					
						
						System.err.println(e.getMessage());
					
	    		}//TD110 end
	        
			    
	        	while ( limittFileInputDelimited_4 != 0 && csvReadertFileInputDelimited_4!=null && csvReadertFileInputDelimited_4.readNext() ) { 
	        		rowstate_tFileInputDelimited_4.reset();
	        
		        	rowtFileInputDelimited_4=csvReadertFileInputDelimited_4.getValues();
	        	
					
	        	
	        	
	        		currentLinetFileInputDelimited_4++;
	            
		            if(lastLinetFileInputDelimited_4 > -1 && currentLinetFileInputDelimited_4 > lastLinetFileInputDelimited_4) {
		                break;
	    	        }
	        	    outputLinetFileInputDelimited_4++;
	            	if (limittFileInputDelimited_4 > 0 && outputLinetFileInputDelimited_4 > limittFileInputDelimited_4) {
	                	break;
	            	}  
	                                                                      
					
	    							row4 = null;			
								
	    							row4 = null;			
								
								boolean whetherReject_tFileInputDelimited_4 = false;
								row4 = new row4Struct();
								try {			
									
				char fieldSeparator_tFileInputDelimited_4_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)";").length() > 0 ){
					fieldSeparator_tFileInputDelimited_4_ListType = ((String)";").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_4.length == 1 && ("\015").equals(rowtFileInputDelimited_4[0])){//empty line when row separator is '\n'
					
							row4.CustomerID = null;
					
							row4.AddressID = null;
					
							row4.NameStyle = null;
					
							row4.Title = null;
					
							row4.FullName = null;
					
							row4.CompanyName = null;
					
							row4.SalesPerson = null;
					
							row4.EmailAddress = null;
					
							row4.Phone = null;
					
							row4.AddressType = null;
					
							row4.AddressLine1 = null;
					
							row4.AddressLine2 = null;
					
							row4.City = null;
					
							row4.StateProvince = null;
					
							row4.CountryRegion = null;
					
							row4.PostalCode = null;
					
				}else{
					
	                int columnIndexWithD_tFileInputDelimited_4 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_4 = 0;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length){
						
						
							
								
									if(rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4].length() > 0) {
										try {
									
										row4.CustomerID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_4) {
											rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"CustomerID", "row4", rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4], ex_tFileInputDelimited_4), ex_tFileInputDelimited_4));
										}
    								}else{
    									
											
												row4.CustomerID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row4.CustomerID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_4 = 1;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length){
						
						
							
								
									if(rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4].length() > 0) {
										try {
									
										row4.AddressID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_4) {
											rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"AddressID", "row4", rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4], ex_tFileInputDelimited_4), ex_tFileInputDelimited_4));
										}
    								}else{
    									
											
												row4.AddressID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row4.AddressID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_4 = 2;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length){
						
						
							
									row4.NameStyle = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];
									
							
						
						}else{
						
							
								row4.NameStyle = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_4 = 3;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length){
						
						
							
									row4.Title = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];
									
							
						
						}else{
						
							
								row4.Title = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_4 = 4;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length){
						
						
							
									row4.FullName = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];
									
							
						
						}else{
						
							
								row4.FullName = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_4 = 5;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length){
						
						
							
									row4.CompanyName = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];
									
							
						
						}else{
						
							
								row4.CompanyName = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_4 = 6;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length){
						
						
							
									row4.SalesPerson = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];
									
							
						
						}else{
						
							
								row4.SalesPerson = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_4 = 7;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length){
						
						
							
									row4.EmailAddress = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];
									
							
						
						}else{
						
							
								row4.EmailAddress = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_4 = 8;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length){
						
						
							
									row4.Phone = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];
									
							
						
						}else{
						
							
								row4.Phone = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_4 = 9;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length){
						
						
							
									row4.AddressType = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];
									
							
						
						}else{
						
							
								row4.AddressType = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_4 = 10;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length){
						
						
							
									row4.AddressLine1 = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];
									
							
						
						}else{
						
							
								row4.AddressLine1 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_4 = 11;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length){
						
						
							
									row4.AddressLine2 = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];
									
							
						
						}else{
						
							
								row4.AddressLine2 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_4 = 12;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length){
						
						
							
									row4.City = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];
									
							
						
						}else{
						
							
								row4.City = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_4 = 13;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length){
						
						
							
									row4.StateProvince = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];
									
							
						
						}else{
						
							
								row4.StateProvince = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_4 = 14;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length){
						
						
							
									row4.CountryRegion = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];
									
							
						
						}else{
						
							
								row4.CountryRegion = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_4 = 15;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length){
						
						
							
									row4.PostalCode = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];
									
							
						
						}else{
						
							
								row4.PostalCode = null;
							
						
						}
						
						
					
				}
				
									
									if(rowstate_tFileInputDelimited_4.getException()!=null) {
										throw rowstate_tFileInputDelimited_4.getException();
									}
									
									
	    						} catch (java.lang.Exception e) {
							        whetherReject_tFileInputDelimited_4 = true;
        							
                							System.err.println(e.getMessage());
                							row4 = null;
                						
	    						}
	
							

 



/**
 * [tFileInputDelimited_4 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_4 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	

 


	tos_count_tFileInputDelimited_4++;

/**
 * [tFileInputDelimited_4 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	

 



/**
 * [tFileInputDelimited_4 process_data_begin ] stop
 */
// Start of branch "row4"
if(row4 != null) { 



	
	/**
	 * [tAdvancedHash_row4 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row4");
					}
					


			   
			   

					row4Struct row4_HashRow = new row4Struct();
		   	   	   
				
				row4_HashRow.CustomerID = row4.CustomerID;
				
				row4_HashRow.AddressID = row4.AddressID;
				
				row4_HashRow.NameStyle = row4.NameStyle;
				
				row4_HashRow.Title = row4.Title;
				
				row4_HashRow.FullName = row4.FullName;
				
				row4_HashRow.CompanyName = row4.CompanyName;
				
				row4_HashRow.SalesPerson = row4.SalesPerson;
				
				row4_HashRow.EmailAddress = row4.EmailAddress;
				
				row4_HashRow.Phone = row4.Phone;
				
				row4_HashRow.AddressType = row4.AddressType;
				
				row4_HashRow.AddressLine1 = row4.AddressLine1;
				
				row4_HashRow.AddressLine2 = row4.AddressLine2;
				
				row4_HashRow.City = row4.City;
				
				row4_HashRow.StateProvince = row4.StateProvince;
				
				row4_HashRow.CountryRegion = row4.CountryRegion;
				
				row4_HashRow.PostalCode = row4.PostalCode;
				
			tHash_Lookup_row4.put(row4_HashRow);
			
            




 


	tos_count_tAdvancedHash_row4++;

/**
 * [tAdvancedHash_row4 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

 



/**
 * [tAdvancedHash_row4 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row4 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

 



/**
 * [tAdvancedHash_row4 process_data_end ] stop
 */

} // End of branch "row4"




	
	/**
	 * [tFileInputDelimited_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	

 



/**
 * [tFileInputDelimited_4 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_4 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	


				nb_line_tFileInputDelimited_4++;
			}
			
			}finally{
    			if(!(filename_tFileInputDelimited_4 instanceof java.io.InputStream)){
    				if(csvReadertFileInputDelimited_4!=null){
    					csvReadertFileInputDelimited_4.close();
    				}
    			}
    			if(csvReadertFileInputDelimited_4!=null){
    				globalMap.put("tFileInputDelimited_4_NB_LINE",nb_line_tFileInputDelimited_4);
    			}
				
			}
						  

 

ok_Hash.put("tFileInputDelimited_4", true);
end_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());




/**
 * [tFileInputDelimited_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

tHash_Lookup_row4.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row4", true);
end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());




/**
 * [tAdvancedHash_row4 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_4 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	

 



/**
 * [tFileInputDelimited_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

 



/**
 * [tAdvancedHash_row4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 1);
	}
	


public static class row5Struct implements routines.system.IPersistableComparableLookupRow<row5Struct> {
    final static byte[] commonByteArrayLock_ADVENTURE_PROJECT_DF_Modelo_Churn = new byte[0];
    static byte[] commonByteArray_ADVENTURE_PROJECT_DF_Modelo_Churn = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int SalesSK;

				public int getSalesSK () {
					return this.SalesSK;
				}
				
			    public String SalesPerson;

				public String getSalesPerson () {
					return this.SalesPerson;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.SalesSK;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row5Struct other = (row5Struct) obj;
		
						if (this.SalesSK != other.SalesSK)
							return false;
					

		return true;
    }

	public void copyDataTo(row5Struct other) {

		other.SalesSK = this.SalesSK;
	            other.SalesPerson = this.SalesPerson;
	            
	}

	public void copyKeysDataTo(row5Struct other) {

		other.SalesSK = this.SalesSK;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ADVENTURE_PROJECT_DF_Modelo_Churn) {

        	try {

        		int length = 0;
		
			        this.SalesSK = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.SalesSK);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.SalesPerson = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.SalesPerson, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SalesSK="+String.valueOf(SalesSK));
		sb.append(",SalesPerson="+SalesPerson);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SalesSK, other.SalesSK);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();




	
	/**
	 * [tAdvancedHash_row5 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row5", false);
		start_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tAdvancedHash_row5 = 0;
		

			   		// connection name:row5
			   		// source node:tFileInputDelimited_5 - inputs:(after_tFileInputDelimited_1) outputs:(row5,row5) | target node:tAdvancedHash_row5 - inputs:(row5) outputs:()
			   		// linked node: tMap_1 - inputs:(row1,row2,row3,row4,row5,row6) outputs:(saida_Rel_Vendas)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row5 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row5Struct>getLookup(matchingModeEnum_row5);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row5", tHash_Lookup_row5);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row5 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_5", false);
		start_Hash.put("tFileInputDelimited_5", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_5";

	
		int tos_count_tFileInputDelimited_5 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_5 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_5 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_5 = null;
				int limit_tFileInputDelimited_5 = -1;
				try{
					
						Object filename_tFileInputDelimited_5 = "C:/Repos/DataOps/Dados/CURATED/DIM_Vendedor.csv";
						if(filename_tFileInputDelimited_5 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_5 = 0, random_value_tFileInputDelimited_5 = -1;
			if(footer_value_tFileInputDelimited_5 >0 || random_value_tFileInputDelimited_5 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_5 = new org.talend.fileprocess.FileInputDelimited("C:/Repos/DataOps/Dados/CURATED/DIM_Vendedor.csv", "UTF-8",";","\n",false,1,0,
									limit_tFileInputDelimited_5
								,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_5!=null && fid_tFileInputDelimited_5.nextRecord()) {
						rowstate_tFileInputDelimited_5.reset();
						
			    						row5 = null;			
									
			    						row5 = null;			
												
									boolean whetherReject_tFileInputDelimited_5 = false;
									row5 = new row5Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_5 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_5 = 0;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row5.SalesSK = ParserUtils.parseTo_int(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"SalesSK", "row5", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_5.setException(new RuntimeException("Value is empty for column : 'SalesSK' in 'row5' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 1;
					
							row5.SalesPerson = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						
				
				
										
										if(rowstate_tFileInputDelimited_5.getException()!=null) {
											throw rowstate_tFileInputDelimited_5.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_5 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row5 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_5 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_5 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";

	

 


	tos_count_tFileInputDelimited_5++;

/**
 * [tFileInputDelimited_5 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";

	

 



/**
 * [tFileInputDelimited_5 process_data_begin ] stop
 */
// Start of branch "row5"
if(row5 != null) { 



	
	/**
	 * [tAdvancedHash_row5 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row5");
					}
					


			   
			   

					row5Struct row5_HashRow = new row5Struct();
		   	   	   
				
				row5_HashRow.SalesSK = row5.SalesSK;
				
				row5_HashRow.SalesPerson = row5.SalesPerson;
				
			tHash_Lookup_row5.put(row5_HashRow);
			
            




 


	tos_count_tAdvancedHash_row5++;

/**
 * [tAdvancedHash_row5 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	

 



/**
 * [tAdvancedHash_row5 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row5 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	

 



/**
 * [tAdvancedHash_row5 process_data_end ] stop
 */

} // End of branch "row5"




	
	/**
	 * [tFileInputDelimited_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";

	

 



/**
 * [tFileInputDelimited_5 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_5 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";

	



            }
            }finally{
                if(!((Object)("C:/Repos/DataOps/Dados/CURATED/DIM_Vendedor.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_5!=null){
                		fid_tFileInputDelimited_5.close();
                	}
                }
                if(fid_tFileInputDelimited_5!=null){
                	globalMap.put("tFileInputDelimited_5_NB_LINE", fid_tFileInputDelimited_5.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_5", true);
end_Hash.put("tFileInputDelimited_5", System.currentTimeMillis());




/**
 * [tFileInputDelimited_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row5 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	

tHash_Lookup_row5.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row5", true);
end_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());




/**
 * [tAdvancedHash_row5 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_5 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";

	

 



/**
 * [tFileInputDelimited_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row5 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	

 



/**
 * [tAdvancedHash_row5 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 1);
	}
	


public static class row6Struct implements routines.system.IPersistableComparableLookupRow<row6Struct> {
    final static byte[] commonByteArrayLock_ADVENTURE_PROJECT_DF_Modelo_Churn = new byte[0];
    static byte[] commonByteArray_ADVENTURE_PROJECT_DF_Modelo_Churn = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer SalesOrderID;

				public Integer getSalesOrderID () {
					return this.SalesOrderID;
				}
				
			    public Integer RevisionNumber;

				public Integer getRevisionNumber () {
					return this.RevisionNumber;
				}
				
			    public java.util.Date OrderDate;

				public java.util.Date getOrderDate () {
					return this.OrderDate;
				}
				
			    public java.util.Date DueDate;

				public java.util.Date getDueDate () {
					return this.DueDate;
				}
				
			    public java.util.Date ShipDate;

				public java.util.Date getShipDate () {
					return this.ShipDate;
				}
				
			    public Short Status;

				public Short getStatus () {
					return this.Status;
				}
				
			    public Integer OnlineOrderFlag;

				public Integer getOnlineOrderFlag () {
					return this.OnlineOrderFlag;
				}
				
			    public String SalesOrderNumber;

				public String getSalesOrderNumber () {
					return this.SalesOrderNumber;
				}
				
			    public String PurchaseOrderNumber;

				public String getPurchaseOrderNumber () {
					return this.PurchaseOrderNumber;
				}
				
			    public String AccountNumber;

				public String getAccountNumber () {
					return this.AccountNumber;
				}
				
			    public Integer ShipToAddressID;

				public Integer getShipToAddressID () {
					return this.ShipToAddressID;
				}
				
			    public Integer BillToAddressID;

				public Integer getBillToAddressID () {
					return this.BillToAddressID;
				}
				
			    public String ShipMethod;

				public String getShipMethod () {
					return this.ShipMethod;
				}
				
			    public Integer CustomerID;

				public Integer getCustomerID () {
					return this.CustomerID;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SalesOrderID == null) ? 0 : this.SalesOrderID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row6Struct other = (row6Struct) obj;
		
						if (this.SalesOrderID == null) {
							if (other.SalesOrderID != null)
								return false;
						
						} else if (!this.SalesOrderID.equals(other.SalesOrderID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row6Struct other) {

		other.SalesOrderID = this.SalesOrderID;
	            other.RevisionNumber = this.RevisionNumber;
	            other.OrderDate = this.OrderDate;
	            other.DueDate = this.DueDate;
	            other.ShipDate = this.ShipDate;
	            other.Status = this.Status;
	            other.OnlineOrderFlag = this.OnlineOrderFlag;
	            other.SalesOrderNumber = this.SalesOrderNumber;
	            other.PurchaseOrderNumber = this.PurchaseOrderNumber;
	            other.AccountNumber = this.AccountNumber;
	            other.ShipToAddressID = this.ShipToAddressID;
	            other.BillToAddressID = this.BillToAddressID;
	            other.ShipMethod = this.ShipMethod;
	            other.CustomerID = this.CustomerID;
	            
	}

	public void copyKeysDataTo(row6Struct other) {

		other.SalesOrderID = this.SalesOrderID;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ADVENTURE_PROJECT_DF_Modelo_Churn) {

        	try {

        		int length = 0;
		
						this.SalesOrderID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.SalesOrderID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.RevisionNumber = readInteger(dis,ois);
					
						this.OrderDate = readDate(dis,ois);
					
						this.DueDate = readDate(dis,ois);
					
						this.ShipDate = readDate(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Status = null;
           				} else {
           			    	this.Status = dis.readShort();
           				}
					
						this.OnlineOrderFlag = readInteger(dis,ois);
					
						this.SalesOrderNumber = readString(dis,ois);
					
						this.PurchaseOrderNumber = readString(dis,ois);
					
						this.AccountNumber = readString(dis,ois);
					
						this.ShipToAddressID = readInteger(dis,ois);
					
						this.BillToAddressID = readInteger(dis,ois);
					
						this.ShipMethod = readString(dis,ois);
					
						this.CustomerID = readInteger(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
					writeInteger(this.RevisionNumber, dos, oos);
					
						writeDate(this.OrderDate, dos, oos);
					
						writeDate(this.DueDate, dos, oos);
					
						writeDate(this.ShipDate, dos, oos);
					
						if(this.Status == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeShort(this.Status);
		            	}
					
					writeInteger(this.OnlineOrderFlag, dos, oos);
					
						writeString(this.SalesOrderNumber, dos, oos);
					
						writeString(this.PurchaseOrderNumber, dos, oos);
					
						writeString(this.AccountNumber, dos, oos);
					
					writeInteger(this.ShipToAddressID, dos, oos);
					
					writeInteger(this.BillToAddressID, dos, oos);
					
						writeString(this.ShipMethod, dos, oos);
					
					writeInteger(this.CustomerID, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SalesOrderID="+String.valueOf(SalesOrderID));
		sb.append(",RevisionNumber="+String.valueOf(RevisionNumber));
		sb.append(",OrderDate="+String.valueOf(OrderDate));
		sb.append(",DueDate="+String.valueOf(DueDate));
		sb.append(",ShipDate="+String.valueOf(ShipDate));
		sb.append(",Status="+String.valueOf(Status));
		sb.append(",OnlineOrderFlag="+String.valueOf(OnlineOrderFlag));
		sb.append(",SalesOrderNumber="+SalesOrderNumber);
		sb.append(",PurchaseOrderNumber="+PurchaseOrderNumber);
		sb.append(",AccountNumber="+AccountNumber);
		sb.append(",ShipToAddressID="+String.valueOf(ShipToAddressID));
		sb.append(",BillToAddressID="+String.valueOf(BillToAddressID));
		sb.append(",ShipMethod="+ShipMethod);
		sb.append(",CustomerID="+String.valueOf(CustomerID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SalesOrderID, other.SalesOrderID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();




	
	/**
	 * [tAdvancedHash_row6 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row6", false);
		start_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tAdvancedHash_row6 = 0;
		

			   		// connection name:row6
			   		// source node:tFileInputDelimited_3 - inputs:(after_tFileInputDelimited_1) outputs:(row6,row6) | target node:tAdvancedHash_row6 - inputs:(row6) outputs:()
			   		// linked node: tMap_1 - inputs:(row1,row2,row3,row4,row5,row6) outputs:(saida_Rel_Vendas)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row6 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row6Struct>getLookup(matchingModeEnum_row6);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row6", tHash_Lookup_row6);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row6 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_3", false);
		start_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_3";

	
		int tos_count_tFileInputDelimited_3 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_3 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_3 = 0;
				int footer_tFileInputDelimited_3 = 0;
				int totalLinetFileInputDelimited_3 = 0;
				int limittFileInputDelimited_3 = -1;
				int lastLinetFileInputDelimited_3 = -1;	
				
				char fieldSeparator_tFileInputDelimited_3[] = null;
				
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)";").length() > 0 ){
					fieldSeparator_tFileInputDelimited_3 = ((String)";").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
			
				char rowSeparator_tFileInputDelimited_3[] = null;
			
				//support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'. 
				if ( ((String)"\n").length() > 0 ){
					rowSeparator_tFileInputDelimited_3 = ((String)"\n").toCharArray();
				}else {
					throw new IllegalArgumentException("Row Separator must be assigned a char."); 
				}
			
				Object filename_tFileInputDelimited_3 = /** Start field tFileInputDelimited_3:FILENAME */"C:/Repos/DataOps/Dados/CURATED/DIM_Order.csv"/** End field tFileInputDelimited_3:FILENAME */;		
				com.talend.csv.CSVReader csvReadertFileInputDelimited_3 = null;
	
				try{
					
						String[] rowtFileInputDelimited_3=null;
						int currentLinetFileInputDelimited_3 = 0;
	        			int outputLinetFileInputDelimited_3 = 0;
						try {//TD110 begin
							if(filename_tFileInputDelimited_3 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_3 = 0;
			if(footer_value_tFileInputDelimited_3 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer shouldn't be bigger than 0.");
			}
		
								csvReadertFileInputDelimited_3=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_3, fieldSeparator_tFileInputDelimited_3[0], "UTF-8");
							}else{
								csvReadertFileInputDelimited_3=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
		                		new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_3)),"UTF-8")), fieldSeparator_tFileInputDelimited_3[0]);
		        			}
					
					
					csvReadertFileInputDelimited_3.setTrimWhitespace(false);
					if ( (rowSeparator_tFileInputDelimited_3[0] != '\n') && (rowSeparator_tFileInputDelimited_3[0] != '\r') )
	        			csvReadertFileInputDelimited_3.setLineEnd(""+rowSeparator_tFileInputDelimited_3[0]);
						
	        				csvReadertFileInputDelimited_3.setQuoteChar('\"');
						
	            				csvReadertFileInputDelimited_3.setEscapeChar(csvReadertFileInputDelimited_3.getQuoteChar());
							      
		
			
						if(footer_tFileInputDelimited_3 > 0){
						for(totalLinetFileInputDelimited_3=0;totalLinetFileInputDelimited_3 < 1; totalLinetFileInputDelimited_3++){
							csvReadertFileInputDelimited_3.readNext();
						}
						csvReadertFileInputDelimited_3.setSkipEmptyRecords(false);
			            while (csvReadertFileInputDelimited_3.readNext()) {
							
	                
	                		totalLinetFileInputDelimited_3++;
	                
							
	                
			            }
	            		int lastLineTemptFileInputDelimited_3 = totalLinetFileInputDelimited_3 - footer_tFileInputDelimited_3   < 0? 0 : totalLinetFileInputDelimited_3 - footer_tFileInputDelimited_3 ;
	            		if(lastLinetFileInputDelimited_3 > 0){
	                		lastLinetFileInputDelimited_3 = lastLinetFileInputDelimited_3 < lastLineTemptFileInputDelimited_3 ? lastLinetFileInputDelimited_3 : lastLineTemptFileInputDelimited_3; 
	            		}else {
	                		lastLinetFileInputDelimited_3 = lastLineTemptFileInputDelimited_3;
	            		}
	         
			          	csvReadertFileInputDelimited_3.close();
				        if(filename_tFileInputDelimited_3 instanceof java.io.InputStream){
				 			csvReadertFileInputDelimited_3=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_3, fieldSeparator_tFileInputDelimited_3[0], "UTF-8");
		        		}else{
				 			csvReadertFileInputDelimited_3=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
				          	new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_3)),"UTF-8")), fieldSeparator_tFileInputDelimited_3[0]);
						}
						csvReadertFileInputDelimited_3.setTrimWhitespace(false);
						if ( (rowSeparator_tFileInputDelimited_3[0] != '\n') && (rowSeparator_tFileInputDelimited_3[0] != '\r') )	
	        				csvReadertFileInputDelimited_3.setLineEnd(""+rowSeparator_tFileInputDelimited_3[0]);
						
							csvReadertFileInputDelimited_3.setQuoteChar('\"');
						
	        				csvReadertFileInputDelimited_3.setEscapeChar(csvReadertFileInputDelimited_3.getQuoteChar());
							  
	        		}
	        
			        if(limittFileInputDelimited_3 != 0){
			        	for(currentLinetFileInputDelimited_3=0;currentLinetFileInputDelimited_3 < 1;currentLinetFileInputDelimited_3++){
			        		csvReadertFileInputDelimited_3.readNext();
			        	}
			        }
			        csvReadertFileInputDelimited_3.setSkipEmptyRecords(false);
	        
	    		} catch(java.lang.Exception e) {
					
						
						System.err.println(e.getMessage());
					
	    		}//TD110 end
	        
			    
	        	while ( limittFileInputDelimited_3 != 0 && csvReadertFileInputDelimited_3!=null && csvReadertFileInputDelimited_3.readNext() ) { 
	        		rowstate_tFileInputDelimited_3.reset();
	        
		        	rowtFileInputDelimited_3=csvReadertFileInputDelimited_3.getValues();
	        	
					
	        	
	        	
	        		currentLinetFileInputDelimited_3++;
	            
		            if(lastLinetFileInputDelimited_3 > -1 && currentLinetFileInputDelimited_3 > lastLinetFileInputDelimited_3) {
		                break;
	    	        }
	        	    outputLinetFileInputDelimited_3++;
	            	if (limittFileInputDelimited_3 > 0 && outputLinetFileInputDelimited_3 > limittFileInputDelimited_3) {
	                	break;
	            	}  
	                                                                      
					
	    							row6 = null;			
								
	    							row6 = null;			
								
								boolean whetherReject_tFileInputDelimited_3 = false;
								row6 = new row6Struct();
								try {			
									
				char fieldSeparator_tFileInputDelimited_3_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)";").length() > 0 ){
					fieldSeparator_tFileInputDelimited_3_ListType = ((String)";").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_3.length == 1 && ("\015").equals(rowtFileInputDelimited_3[0])){//empty line when row separator is '\n'
					
							row6.SalesOrderID = null;
					
							row6.RevisionNumber = null;
					
							row6.OrderDate = null;
					
							row6.DueDate = null;
					
							row6.ShipDate = null;
					
							row6.Status = null;
					
							row6.OnlineOrderFlag = null;
					
							row6.SalesOrderNumber = null;
					
							row6.PurchaseOrderNumber = null;
					
							row6.AccountNumber = null;
					
							row6.ShipToAddressID = null;
					
							row6.BillToAddressID = null;
					
							row6.ShipMethod = null;
					
							row6.CustomerID = null;
					
				}else{
					
	                int columnIndexWithD_tFileInputDelimited_3 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_3 = 0;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
								
									if(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {
									
										row6.SalesOrderID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_3) {
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"SalesOrderID", "row6", rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
										}
    								}else{
    									
											
												row6.SalesOrderID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row6.SalesOrderID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 1;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
								
									if(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {
									
										row6.RevisionNumber = ParserUtils.parseTo_Integer(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_3) {
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"RevisionNumber", "row6", rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
										}
    								}else{
    									
											
												row6.RevisionNumber = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row6.RevisionNumber = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 2;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
								
									if(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {
									
											row6.OrderDate = ParserUtils.parseTo_Date(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], "dd-MM-yyyy");
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_3) {
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"OrderDate", "row6", rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
										}
    								}else{
    									
											
												row6.OrderDate = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row6.OrderDate = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 3;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
								
									if(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {
									
											row6.DueDate = ParserUtils.parseTo_Date(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], "dd-MM-yyyy");
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_3) {
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"DueDate", "row6", rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
										}
    								}else{
    									
											
												row6.DueDate = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row6.DueDate = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 4;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
								
									if(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {
									
											row6.ShipDate = ParserUtils.parseTo_Date(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], "dd-MM-yyyy");
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_3) {
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"ShipDate", "row6", rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
										}
    								}else{
    									
											
												row6.ShipDate = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row6.ShipDate = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 5;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
								
									if(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {
									
										row6.Status = ParserUtils.parseTo_Short(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_3) {
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Status", "row6", rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
										}
    								}else{
    									
											
												row6.Status = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row6.Status = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 6;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
								
									if(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {
									
										row6.OnlineOrderFlag = ParserUtils.parseTo_Integer(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_3) {
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"OnlineOrderFlag", "row6", rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
										}
    								}else{
    									
											
												row6.OnlineOrderFlag = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row6.OnlineOrderFlag = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 7;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row6.SalesOrderNumber = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row6.SalesOrderNumber = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 8;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row6.PurchaseOrderNumber = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row6.PurchaseOrderNumber = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 9;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row6.AccountNumber = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row6.AccountNumber = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 10;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
								
									if(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {
									
										row6.ShipToAddressID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_3) {
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"ShipToAddressID", "row6", rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
										}
    								}else{
    									
											
												row6.ShipToAddressID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row6.ShipToAddressID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 11;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
								
									if(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {
									
										row6.BillToAddressID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_3) {
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"BillToAddressID", "row6", rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
										}
    								}else{
    									
											
												row6.BillToAddressID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row6.BillToAddressID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 12;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row6.ShipMethod = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row6.ShipMethod = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 13;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
								
									if(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {
									
										row6.CustomerID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_3) {
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"CustomerID", "row6", rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
										}
    								}else{
    									
											
												row6.CustomerID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row6.CustomerID = null;
							
						
						}
						
						
					
				}
				
									
									if(rowstate_tFileInputDelimited_3.getException()!=null) {
										throw rowstate_tFileInputDelimited_3.getException();
									}
									
									
	    						} catch (java.lang.Exception e) {
							        whetherReject_tFileInputDelimited_3 = true;
        							
                							System.err.println(e.getMessage());
                							row6 = null;
                						
	    						}
	
							

 



/**
 * [tFileInputDelimited_3 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 


	tos_count_tFileInputDelimited_3++;

/**
 * [tFileInputDelimited_3 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 



/**
 * [tFileInputDelimited_3 process_data_begin ] stop
 */
// Start of branch "row6"
if(row6 != null) { 



	
	/**
	 * [tAdvancedHash_row6 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row6");
					}
					


			   
			   

					row6Struct row6_HashRow = new row6Struct();
		   	   	   
				
				row6_HashRow.SalesOrderID = row6.SalesOrderID;
				
				row6_HashRow.RevisionNumber = row6.RevisionNumber;
				
				row6_HashRow.OrderDate = row6.OrderDate;
				
				row6_HashRow.DueDate = row6.DueDate;
				
				row6_HashRow.ShipDate = row6.ShipDate;
				
				row6_HashRow.Status = row6.Status;
				
				row6_HashRow.OnlineOrderFlag = row6.OnlineOrderFlag;
				
				row6_HashRow.SalesOrderNumber = row6.SalesOrderNumber;
				
				row6_HashRow.PurchaseOrderNumber = row6.PurchaseOrderNumber;
				
				row6_HashRow.AccountNumber = row6.AccountNumber;
				
				row6_HashRow.ShipToAddressID = row6.ShipToAddressID;
				
				row6_HashRow.BillToAddressID = row6.BillToAddressID;
				
				row6_HashRow.ShipMethod = row6.ShipMethod;
				
				row6_HashRow.CustomerID = row6.CustomerID;
				
			tHash_Lookup_row6.put(row6_HashRow);
			
            




 


	tos_count_tAdvancedHash_row6++;

/**
 * [tAdvancedHash_row6 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	

 



/**
 * [tAdvancedHash_row6 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row6 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	

 



/**
 * [tAdvancedHash_row6 process_data_end ] stop
 */

} // End of branch "row6"




	
	/**
	 * [tFileInputDelimited_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 



/**
 * [tFileInputDelimited_3 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	


				nb_line_tFileInputDelimited_3++;
			}
			
			}finally{
    			if(!(filename_tFileInputDelimited_3 instanceof java.io.InputStream)){
    				if(csvReadertFileInputDelimited_3!=null){
    					csvReadertFileInputDelimited_3.close();
    				}
    			}
    			if(csvReadertFileInputDelimited_3!=null){
    				globalMap.put("tFileInputDelimited_3_NB_LINE",nb_line_tFileInputDelimited_3);
    			}
				
			}
						  

 

ok_Hash.put("tFileInputDelimited_3", true);
end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());




/**
 * [tFileInputDelimited_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	

tHash_Lookup_row6.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row6", true);
end_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());




/**
 * [tAdvancedHash_row6 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_3 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 



/**
 * [tFileInputDelimited_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	

 



/**
 * [tAdvancedHash_row6 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final DF_Modelo_Churn DF_Modelo_ChurnClass = new DF_Modelo_Churn();

        int exitCode = DF_Modelo_ChurnClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = DF_Modelo_Churn.class.getClassLoader().getResourceAsStream("adventure_project/df_modelo_churn_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = DF_Modelo_Churn.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileInputDelimited_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : DF_Modelo_Churn");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     293910 characters generated by Talend Open Studio for Big Data 
 *     on the 14 de Julho de 2021 0h27min42s BRT
 ************************************************************************************************/